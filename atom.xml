<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chris Callahan's Blog]]></title>
  <link href="http://callahanchris.github.io/atom.xml" rel="self"/>
  <link href="http://callahanchris.github.io/"/>
  <updated>2014-07-28T09:31:57-04:00</updated>
  <id>http://callahanchris.github.io/</id>
  <author>
    <name><![CDATA[Chris Callahan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Five Useful Ruby Array Methods]]></title>
    <link href="http://callahanchris.github.io/blog/2014/07/17/five-useful-ruby-array-methods/"/>
    <updated>2014-07-17T13:25:34-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/07/17/five-useful-ruby-array-methods</id>
    <content type="html"><![CDATA[<p>Arrays are a versatile and reliable data structure. The <code>Array</code> class in Ruby comes equipped with a number of extremely useful instance methods, including <code>pop</code>, <code>push</code>, <code>shift</code>, <code>unshift</code>, <code>length</code>, <code>reverse</code>, etc. With the <code>Enumerable</code> module mixin, Ruby arrays have access to even more iterators and other fun methods.</p>

<p>Here are five great instance methods built in to Ruby&rsquo;s <code>Array</code> class that I&rsquo;ve come across recently.</p>

<h3><code>Array#transpose</code></h3>

<p>This is probably the fanciest method on this list. It is used to &ldquo;reflect&rdquo; an array across a diagonal axis. Wikipedia has a good explanation of <a href="http://en.wikipedia.org/wiki/Transpose">matrix transposition</a>, including this handy gif:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e4/Matrix_transpose.gif" alt="transpose" /></p>

<p>Here is how the <code>transpose</code> method looks in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>          <span class="o">[</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span>  <span class="s2">&quot;b&quot;</span><span class="p">,</span>  <span class="s2">&quot;c&quot;</span><span class="p">,</span>  <span class="s2">&quot;d&quot;</span><span class="p">,</span>   <span class="s2">&quot;e&quot;</span>  <span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span>  <span class="mi">1</span><span class="p">,</span>    <span class="mi">2</span><span class="p">,</span>    <span class="mi">3</span><span class="p">,</span>    <span class="mi">4</span><span class="p">,</span>     <span class="mi">5</span>   <span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;cat&quot;</span><span class="p">,</span><span class="s2">&quot;dog&quot;</span><span class="p">,</span><span class="s2">&quot;cow&quot;</span><span class="p">,</span><span class="s2">&quot;pig&quot;</span><span class="p">,</span><span class="s2">&quot;horse&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">transpose</span>
</span><span class='line'><span class="c1">#    =&gt; [</span>
</span><span class='line'><span class="c1">#         [&quot;a&quot;, 1,  &quot;cat&quot; ],</span>
</span><span class='line'><span class="c1">#         [&quot;b&quot;, 2,  &quot;dog&quot; ],</span>
</span><span class='line'><span class="c1">#         [&quot;c&quot;, 3,  &quot;cow&quot; ],</span>
</span><span class='line'><span class="c1">#         [&quot;d&quot;, 4,  &quot;pig&quot; ], </span>
</span><span class='line'><span class="c1">#         [&quot;e&quot;, 5, &quot;horse&quot;]</span>
</span><span class='line'><span class="c1">#       ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>transpose</code> can only be used when you have an array of arrays where all of the nested arrays are the same length.</p>

<p>I got some use out of the <code>transpose</code> method when trying to rotate an array of arrays (a tic tac toe board) 90 degrees to the right. I first called <code>transpose</code> on the array and then chained on <code>map(&amp;:reverse)</code> to individually reverse each of the nested arrays.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">board</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;O&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">rotated_board</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="n">transpose</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:reverse</span><span class="p">)</span>
</span><span class='line'><span class="c1">#    =&gt; [</span>
</span><span class='line'><span class="c1">#         [&quot;O&quot;, &quot;X&quot;, &quot;O&quot;],</span>
</span><span class='line'><span class="c1">#         [&quot;X&quot;, &quot;X&quot;, &quot; &quot;],</span>
</span><span class='line'><span class="c1">#         [&quot; &quot;, &quot;O&quot;, &quot;X&quot;]</span>
</span><span class='line'><span class="c1">#       ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>With access to both a <code>board</code> and a <code>rotated_board</code>, I was able to easily reuse methods in my tic tac toe game.</p>

<h3><code>Array#fill</code></h3>

<p><code>fill</code> does just what it says: it fills every element in an array with the argument passed to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ a b c }</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;Hello world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;Hello world!&quot;, &quot;Hello world!&quot;, &quot;Hello world!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass a starting index and a length as arguments to <code>fill</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ an array full of words and things }</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;surprises&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;an&quot;, &quot;array&quot;, &quot;full&quot;, &quot;of&quot;, &quot;surprises&quot;, &quot;surprises&quot;, &quot;surprises&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even pass a block to <code>fill</code>, which yields the array&rsquo;s index as the block argument. Ruby is awesome!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ hello world my name is chris }</span><span class="o">.</span><span class="n">fill</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [0, 1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Warning: <code>fill</code> is a destructive method. Once an array is <code>fill</code>ed, the old data is permanently gone.</p>

<h3><code>Array#permutation</code></h3>

<p>This method returns all permutations of the array it is sent to. If no block is used, then by default Ruby returns an <code>Enumerator</code> object, so it is useful to chain the <code>to_a</code> method on the end in order to return an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">permutation</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Enumerator: [1, 2, 3]:permutation&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">permutation</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1"># =&gt; [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method sounds a bit esoteric, but I have used it in practice when trying to find all possible anagrams of a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">all_permutations</span> <span class="o">=</span> <span class="s2">&quot;listen&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">permutation</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">letters</span><span class="o">|</span> <span class="n">letters</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;listen&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;listne&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;lisetn&quot;,</span>
</span><span class='line'><span class="c1">#     ... 716 more permutations! ...</span>
</span><span class='line'><span class="c1">#     &quot;netsil&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">all_permutations</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;silent&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">all_permutations</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;lentils&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Array#sample</code></h3>

<p><code>sample</code> is a convenient way to randomly select one or more elements from an array. If you do not pass an argument to <code>sample</code>, it will return one object from the array. If you pass a number as an argument to <code>sample</code>, it will return an array including the number of elements specified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ cat dog pig pigeon dolphin walrus }</span><span class="o">.</span><span class="n">sample</span>
</span><span class='line'><span class="c1"># =&gt; &quot;pigeon&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{ cat dog pig pigeon dolphin walrus }</span><span class="o">.</span><span class="n">sample</span>
</span><span class='line'><span class="c1"># =&gt; &quot;dolphin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{ cat dog pig pigeon dolphin walrus }</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;cat&quot;, &quot;pigeon&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Array#flatten</code></h3>

<p>This is probably the method I use the most on this list. When doing nested iteration in Ruby, you often end up with an array of arrays. If you want to compare each element in the larger array, you will be confounded by the fact that Ruby tries to compare the nested arrays with each other, rather than the values within these arrays.</p>

<p>To get around this problem, the <code>flatten</code> method turns a nested array into an array one level deep.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="o">]]</span><span class="p">,</span> <span class="o">[[[</span><span class="mi">5</span><span class="o">]]]].</span><span class="n">flatten</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method is not destructive (though it does have a destructive counterpart in <code>flatten!</code>), so it is mainly useful if you want to perform a specific operation on a flattened array. For example, if you wind up with a nested array after performing multiple <code>collects</code> and then want to perform an operation on the array, <code>flatten</code> can come in handy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dogs</span> <span class="o">=</span> <span class="o">[[</span><span class="c1">#&lt;Dog:0x00000101d52a30 @name=&quot;Fido&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x00000101d01f90 @name=&quot;Fredo&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x00000101ae2098 @name=&quot;Freida&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x00000106187548 @name=&quot;Francis&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x0000010615d630 @name=&quot;Bailey&quot;&gt;]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">dogs</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `name&#39; for #&lt;Array:0x00000101ee5b18&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dogs</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [#&lt;Dog:0x0000010615d630 @name=&quot;Bailey&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000101d52a30 @name=&quot;Fido&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000106187548 @name=&quot;Francis&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000101d01f90 @name=&quot;Fredo&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000101ae2098 @name=&quot;Freida&quot;&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>flatten</code> also takes an argument to specify how many levels to flatten the nested array by.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="mi">2</span><span class="o">]].</span><span class="n">flatten</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [[1], 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not sure how useful passing in an argument is, as I have only used <code>flatten</code> without an argument in practice.</p>

<h3>Closing Thoughts</h3>

<p>Arrays are an interesting Ruby class with a surprising amount of useful builtin methods. Read the Ruby documentation for more info and more unique methods to play around with.</p>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.2/Array.html">Ruby Doc &ndash; Array</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons From Refactoring Tic Tac Toe]]></title>
    <link href="http://callahanchris.github.io/blog/2014/07/10/lessons-from-refactoring-tic-tac-toe/"/>
    <updated>2014-07-10T18:02:50-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/07/10/lessons-from-refactoring-tic-tac-toe</id>
    <content type="html"><![CDATA[<p><em><a href="https://github.com/callahanchris/tic-tac-toe">Check out my tic tac toe code on github!</a></em></p>

<p>As part of my application to the Flatiron School in January of this year, I had to write a tic tac toe computer program. The assignment was purposely left vague; it was up to me to decide what programming language to use, how complex it was, whether it was one-player or two-player, etc.</p>

<p>After four or five days of unchecked obsession (fueled in part by my fiancee&rsquo;s invaluable bug-spotting abilities), I emerged with 438 lines of Ruby code and a working one-player version of tic tac toe that could be played on the command line. It was ugly, but it worked.</p>

<p>Six months later, as I near the halfway point in the web development course at the Flatiron School, I decided to apply my new programming knowledge by refactoring the code of my old tic tac toe game.</p>

<p>In the end, I threw out about 95% of my original code. It was painful to do this, but through the pain, I learned some valuable lessons.</p>

<h3>Make Smaller Methods</h3>

<p>Small methods are the bedrock of semantic, abstract, and reusable code. Until reading <a href="http://www.poodr.com/">POODR</a> and listening to <a href="https://twitter.com/aviflombaum">Avi Flombaum&rsquo;s</a> lectures, I had no clue about the value of the single responsibility principle. When applied to methods, the single responsibility principle means making methods that accomplish only one purpose. A good litmus test is to ask: &ldquo;What does this method do?&rdquo; If there are any &ldquo;and&#8221;s or &#8220;or&#8221;s in the response, the method might be shouldering multiple responsibilities.</p>

<p>Aside of making your code more readable and consise, breaking methods down to smaller and smaller units has an additional (and unexpected) benefit: the emergence of seredipitous recombinations. After breaking down methods into atomic units, you often find that you are able to reuse these methods in contexts outside of that in which you originally designed the method.</p>

<p>It was awesome being able to apply these ideas to my tic tac toe game. I feel much more confident using smaller methods now.</p>

<p>Here is an example from my original tic tac toe game of the <code>empty_spaces</code> method that determines how many empty spaces are left on the board. [<em>Warning: I really did not know how to code when I wrote this program. Just be thankful I&rsquo;m not pasting in the 160(!) line method I had in the original program.</em>]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty_spaces</span>
</span><span class='line'>  <span class="c1"># Check to see how many empty spaces are left on the board</span>
</span><span class='line'>  <span class="vi">@empty_spaces</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Convert the @tttboard variable array a standard array for quick check</span>
</span><span class='line'>  <span class="n">ttt</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ttt</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>      <span class="vi">@empty_spaces</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@empty_spaces</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here is the refactored version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty_spaces</span>
</span><span class='line'>  <span class="n">board</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One line methods are awesome! The new implementation of <code>empty_spaces</code> is significantly more readable and easier to understand than the original one. It utilizes the reader method provided by <code>attr_reader :board</code> rather than directly accessing the data <code>@board</code> instance variable, making the code more open to easy changes going forward.</p>

<p>After DRYing up my methods, I had to take on a larger design issue: classes.</p>

<h3>Make Smaller Classes</h3>

<blockquote><p>&ldquo;Applications that are easy to change consist of classes that are easy to reuse. Reusable classes are pluggable units of well-defined behavior that have few entanglements. An application that is easy to change is like a box of building blocks; you can select just the pieces you need and assemble them in unanticipated ways.&rdquo;</p></blockquote>

<p><em>&mdash; Practical Object-Oriented Design in Ruby, page 21</em></p>

<p>I didn&rsquo;t understand the purpose of classes back in January when I first wrote my tic tac toe implementation. This partially explains why I originally only included one class (<code>TicTacToe</code>) that stood at a monstrous 405 lines &mdash; a veritable God object towering over my codebase.</p>

<p>I am still far from mastering the principles of object-oriented design, but I have come a long way over the last few months, thanks largely to <em>POODR</em> and <em>The Well-Grounded Rubyist</em>. One of the most important things I&rsquo;ve learned along the way is to not be afraid of classes. Watching tech talks by Sandi Metz, Ben Orenstein, and others showed me that the single responsibility principle also applies to classes.</p>

<p>My new tic tac toe codebase has 9 classes, all of which sit inside of the <code>TTT</code> module. The stubbed out class hierarchy in my program now vaguely looks like this:</p>

<pre><code>module TTT            #=&gt; namespace and home to the constant BOARD
|
--class Game          #=&gt; initializes new Human and Computer objects
|
--class CLIRunner     #=&gt; responsible for running the game via CLI
|
--class CheckWinner   #=&gt; checks if the game has been won
|
--class Human         #=&gt; defines the ground rules for human moves
|
--class Computer      #=&gt; delegates the computer's AI logic to subclasses
  |
  --class Opener      #=&gt; makes opening moves for the computer
  |
  --class Winner      #=&gt; makes winning moves for the computer
  | |
  | --class Blocker   #=&gt; piggybacks off of the Winner class's logic to
  |                   #=&gt; block potential wins by the human player
  |
  --class RandomMover #=&gt; moves randomly if the above strategies fail
</code></pre>

<p>It is abundantly clear now what each class does. Here is the computer&rsquo;s original logic for blocking a human from winning, which was imbedded inside of the 160 line <code>computer</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The computer blocks the human player if it does not have a winning move</span>
</span><span class='line'><span class="c1"># Computer blocks against human&#39;s diagonal wins</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Computer blocks against human&#39;s horizontal wins</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># ...10 more lines of code...</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Computer blocks against human&#39;s vertical wins</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># ...10 more lines of code...</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the new implementation of the <code>Blocker</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Blocker</span> <span class="o">&lt;</span> <span class="ss">TTT</span><span class="p">:</span><span class="ss">:Computer</span><span class="o">::</span><span class="no">Winner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">potential_wins</span>
</span><span class='line'>    <span class="o">[</span><span class="n">opponent</span><span class="p">,</span> <span class="n">opponent</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">].</span><span class="n">permutation</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">can_block?</span>
</span><span class='line'>    <span class="n">can_win?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While the original version hard coded the lookup process on the board and manually altered the data of each square in the <code>@tttboard</code> array, the <code>Blocker</code> class by contrast seems almost empty. <code>Blocker</code> inherits from the <code>Winner</code> class, which implements the logic of finding <code>potential_wins</code> and filling in the <code>piece</code> (&ldquo;X&rdquo; or &ldquo;O&rdquo;) of the computer in the empty space. The <code>Winner</code> class has methods like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">can_win_horiz?</span>
</span><span class='line'>  <span class="n">potential_wins</span><span class="o">.</span><span class="n">any?</span> <span class="k">do</span> <span class="o">|</span><span class="n">pot_win</span><span class="o">|</span>
</span><span class='line'>    <span class="n">board</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">pot_win</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>which determines if there are any potential wins for the computer horizontally. Another method <code>horiz_win</code> in the <code>Winner</code> class then uses the <code>update_board</code> method inherited from the <code>Computer</code> class to fill in the tic tac toe board with the computer&rsquo;s move.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">TTT</span><span class="p">:</span><span class="ss">:BOARD</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">piece</span> <span class="k">if</span> <span class="ss">TTT</span><span class="p">:</span><span class="ss">:BOARD</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Blocker</code> class has access to all of the methods of the <code>Winner</code> class. <code>Blocker</code> is essentially solving the same puzzle as <code>Winner</code>, but instead of solving for <em>computer</em> wins, it is solving for <em>human</em> wins. Therefore, all I really needed to change was the <code>potential_wins</code> method, plugging in <code>opponent</code> (indicating the human&rsquo;s &ldquo;X&rdquo; or &ldquo;O&rdquo; piece). This overwrote <code>Winner</code>&rsquo;s implementation of this method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">potential_wins</span>
</span><span class='line'>  <span class="o">[</span><span class="n">piece</span><span class="p">,</span> <span class="n">piece</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">].</span><span class="n">permutation</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Make Reusable Code</h3>

<p>This is the overarching lesson I learned in the process of refactoring my tic tac toe code. Writing the original tic tac toe implementation was painful &mdash; not only because I didn&rsquo;t really understand how to code at the time, but also because the code I wrote was extremely resistant to change. My new implementation of tic tac toe, on the other hand, relies more on abstractions and is significantly more open to the possibility of change in the future.</p>

<p>Take, for example, the <code>Computer</code> class&rsquo;s <code>move</code> algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">move</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">empty_spaces</span> <span class="o">&gt;</span> <span class="mi">7</span>
</span><span class='line'>    <span class="n">opener</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">winner</span><span class="o">.</span><span class="n">can_win?</span>
</span><span class='line'>    <span class="n">winner</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">blocker</span><span class="o">.</span><span class="n">can_block?</span>
</span><span class='line'>    <span class="n">blocker</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">random_mover</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what if I want to make the computer smarter and decide to implement a way for the computer to recognize opportunities to create a fork? In my original implementation, the cost of adding such a feature was simply too high. Not only would I be afraid of breaking my existing code, but I&rsquo;d also have to hardcode every single permutation possible &mdash; something I now know is avoidable.</p>

<p>Instead, with the new code, I could make a <code>Forker</code> class that inherits from <code>Computer</code>. The most significant change I&rsquo;d have to make to <code>Computer</code> to accomplish this would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">move</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">empty_spaces</span> <span class="o">&gt;</span> <span class="mi">7</span>
</span><span class='line'>    <span class="n">opener</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">winner</span><span class="o">.</span><span class="n">can_win?</span>
</span><span class='line'>    <span class="n">winner</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">blocker</span><span class="o">.</span><span class="n">can_block?</span>
</span><span class='line'>    <span class="n">blocker</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">forker</span><span class="o">.</span><span class="n">can_fork?</span>
</span><span class='line'>    <span class="n">forker</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">random_mover</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By extension, making a <code>ForkBlocker</code> class would be equally easy to accomplish.</p>

<p>There are many other ways that my tic tac toe codebase can be easily expanded upon now. I could make the game a 4x4 or 5x5 grid instead of a 3x3 grid with ease. I don&rsquo;t even want to think about how many hours and keystrokes it would take to accomplish in the original implementation.</p>

<h3>Going Forward</h3>

<p>Another direction I want to take this project in is bringing tic tac toe to the Internet! I have a basic grasp of the Sinatra and Ruby on Rails web application frameworks, and now that I have tic tac toe running on the command line, the next logical step is figuring out how to deploy it on the web. This could bring about some new and interesting challenges like how to integrate JavaScript and jQuery into the app. I know very little about these technologies but am excited to learn more!</p>

<h3>Links/Resources</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">Sandi Metz &ndash; All the Little Things (RailsConf 2014)</a></li>
<li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby (POODR)</a></li>
<li><a href="http://www.manning.com/black3/">The Well-Grounded Rubyist</a></li>
<li><a href="http://rubyrogues.com/087-rr-book-clubpractical-object-oriented-design-in-ruby-with-sandi-metz/">Sandi Metz on the Ruby Rogues podcast</a></li>
<li><a href="https://www.youtube.com/watch?v=DC-pQPq0acs">Ben Orenstein &ndash; Refactoring from Good to Great (Aloha Ruby Conf 2012)</a></li>
<li><a href="https://www.youtube.com/watch?v=9LfmrkyP81M">David Heinemeier Hansson &ndash; Writing Software (RailsConf 2014)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Understanding Ruby Modules Through Zombies]]></title>
    <link href="http://callahanchris.github.io/blog/2014/06/26/better-understanding-ruby-modules-through-zombies/"/>
    <updated>2014-06-26T22:02:51-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/06/26/better-understanding-ruby-modules-through-zombies</id>
    <content type="html"><![CDATA[<p>Modules in Ruby are a great place to store shared behavior and data used throughout a program. Writing a module is a convenient way to abstract out shared methods from multiple classes, thereby making the classes more DRY and manageable.</p>

<p>Some of the most popular modules in the Ruby core are <code>Comparable</code>, <code>Math</code>, and <code>Enumerable</code>. Yes, <a href="http://ruby-doc.org/core-2.1.2/Enumerable.html">a module</a> is the reason Rubyists across the world can enjoy <code>each</code> and other higher level iterators like <code>all?</code>, <code>collect</code>, and <code>inject</code>! <code>ActiveRecord</code> and <code>Sinatra</code> are two other popular modules used in the Rails and Sinatra web frameworks, respectively.</p>

<h3>Why Use Modules?</h3>

<p><a href="http://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">DHH likes modules.</a> And they&rsquo;re cool.</p>

<h3>How to Name a Module</h3>

<p>Names are important in programming. And since modules are known in technical parlance as &ldquo;namespaces&rdquo;, module names are doubly important&hellip; and doubly spacious.</p>

<p>Like classes, modules in Ruby are capitalized in CamelCase. Whereas classes tend to be singular nouns (<code>Person</code>, <code>Dog</code>, <code>Artist</code>), module names tend to be adjectives (<code>Magical</code>, <code>Persistable</code>, <code>Catlike</code>). Modules often have unique names that describe the behaviors, characteristics, or qualities shared by multiple classes.</p>

<p>These naming conventions make sense because, unlike classes, modules cannot be instantiated. You can make a new <code>Person</code>, but you cannot make a new <code>Magical</code>.</p>

<p>In your Rails app, file your modules in the <code>app/models/concerns</code>, <code>app/controllers/concerns</code>, and <code>lib/concerns</code> directories.</p>

<h3>Ineritance via Modules</h3>

<p>Direct class-to-class inheritance in Ruby is a tricky subject: only single inheritance is allowed. For example, this is valid Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mammal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Animal</span> <span class="o">&lt;</span> <span class="no">Mammal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1">#=&gt; [Dog, Animal, Mammal, Object, Kernel, BasicObject] </span>
</span></code></pre></td></tr></table></div></figure>


<p>but this is not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MansBestFriend</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">MansBestFriend</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; TypeError: superclass mismatch for class Dog</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1">#=&gt; [Dog, Animal, Object, Kernel, BasicObject] </span>
</span></code></pre></td></tr></table></div></figure>


<p>Modules solve the problem of multiple inheritance in an interesting way. A class can call the <code>extend</code> method to inherit a module&rsquo;s class methods, and a class can call the <code>include</code> method to inherit a module&rsquo;s instance methods.</p>

<p>As a result, it is good practice to write modules in the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Generic</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># class methods go here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="c1"># instance methods go here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The methods in the <code>Generic</code> module can be mixed in to a class as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Student</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">Generic</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Generic</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enter Zombies</h3>

<p>Zombies provide a useful analogy for thinking about the relationship between classes and modules. Consider the <code>Person</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">occupation</span>
</span><span class='line'>    <span class="s2">&quot;Being a human.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can instantiate a new person as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chris</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Chris&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Person:0x0000010185eba0 @name=&quot;Chris&quot;&gt;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Chris&quot;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">occupation</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Being a human.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s say that a zombie pandemic breaks out. First thing&rsquo;s first: how do we refactor our code?</p>

<p>We could rename our <code>Person</code> class to <code>Zombie</code> or write a new <code>Zombie</code> class, but neither of these options feel totally right. Instead, it would seem more appropriate for instances of the <code>Person</code> class to adopt zombie behavior in addition to the original behaviors of the <code>Person</code> class.</p>

<p>A <code>Zombified</code> module is the obvious choice here: it is an abstraction encapsulating shared behavior across (potentially) multiple classes, and it does not need to be instantiated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Zombified</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">status_of_the_human_race</span>
</span><span class='line'>      <span class="s2">&quot;doomed&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">preferred_source_of_energy</span>
</span><span class='line'>      <span class="s2">&quot;BRAAAAIIINNNNSSSS!!!!!&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">is_alive?</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>include</code></h3>

<p>When a module is <code>include</code>d into a class, instances of that class have access to the instance methods of both the class and the module mixed in to the class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Zombified</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">chris</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Brains&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Person:0x00000102250618 @name=&quot;Brains&quot;&gt;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Brains&quot;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">preferred_source_of_energy</span>
</span><span class='line'><span class="c1">#=&gt; &quot;BRAAAAIIINNNNSSSS!!!!!&quot;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">is_alive?</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>chris</code> has access to both the instance methods of the <code>Person</code> class and the instance methods provided by the <code>Zombified::InstanceMethods</code> module. In <code>chris</code>&rsquo;s method lookup chain, the methods in <code>Person</code> come before the methods in the <code>Zombified::InstanceMethods</code> module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1">#=&gt; [Person, Zombified::InstanceMethods, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important takeaway is that method names in a module should <em>not</em> conflict with those of the method names in the classes they are mixed into. Instead, choose more abstract and granular method names.</p>

<h3><code>extend</code></h3>

<p>Uh oh. The zombie pandemic has spread across the planet. What&rsquo;s the status of the human race, then?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">status_of_the_human_race</span>
</span><span class='line'><span class="c1">#=&gt; NoMethodError: undefined method `status_of_the_human_race&#39; for Person:Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right. Time to refactor our code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">Zombified</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">status_of_the_human_race</span>
</span><span class='line'><span class="c1">#=&gt; &quot;doomed&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Humanity is doomed, thanks to our handy module.</p>

<p>From here it&rsquo;s easy to zombify objects in other classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Zombified</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Dog:0x0000010326e428&gt;</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">preferred_source_of_energy</span>
</span><span class='line'><span class="c1">#=&gt; &quot;BRAAAAIIINNNNSSSS!!!!!&quot;</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">is_alive?</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Modules are fun! I hope to do another blog post about some of the other cool and more metaprogramm-y things you can do with modules, but for now check out some of the links below.</p>

<ul>
<li><a href="http://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">DHH on Modules</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.2/Module.html">Ruby Core Documentation</a></li>
<li><a href="http://gshutler.com/2013/04/ruby-2-module-prepend/">How to <code>prepend</code> a Module</a></li>
<li><a href="http://dev.af83.com/2012/11/05/ruby-2-0-module-refine.html"><code>refine</code> Classes <code>using</code> Modules</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstraction and Music Library Sorting]]></title>
    <link href="http://callahanchris.github.io/blog/2014/06/09/abstraction-and-music-library-sorting/"/>
    <updated>2014-06-09T09:41:21-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/06/09/abstraction-and-music-library-sorting</id>
    <content type="html"><![CDATA[<p>Last week at the Flatiron School, <a href="https://twitter.com/aviflombaum">Avi Flombaum</a> talked about the merits of abstraction in code. As Avi mentioned, code can become much more idiomatic when it utilizes abstraction instead of relying on specific details.</p>

<p>The Ruby core comes equipped with a whole toolbox of nicely abstracted methods that can be used to write some great and expressive code. This one of the reasons that programmers love to write code in Ruby.</p>

<p>While doing one of the homework labs over the weekend, I realized how much more expressive code can become when many of the lower-level details are abstracted out. As I&rsquo;ve become more comfortable programming in Ruby, I&rsquo;ve been to make my code more abstract and expressive.</p>

<h3>A Non-Abstract <code>sort_songs</code></h3>

<p>In the lab, I was tasked to create a <code>sort_songs</code> method that took an array of songs expressed as strings in the format <code>"Artist - Album - Song"</code> and returned the same strings in a nested array that grouped songs based on artist and album. In order to pass this lab, the <code>sort_songs</code> method had to correctly respond to a set of RSpec tests, which sent a preset array of songs to <code>sort_songs</code> and expected the output to be a properly formatted nested array.</p>

<p>On my first crack at this problem I followed the instructions to the letter. I therefore implemented my first <code>sort_songs</code> method to respond <em>exactly</em> to the preset list of songs included in the test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sort_songs</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sorted_array</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                      <span class="o">[]</span>
</span><span class='line'>                    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                      <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>                      <span class="o">[]</span>
</span><span class='line'>                    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                      <span class="o">[]</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>                  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>    <span class="n">artist</span><span class="p">,</span> <span class="n">album</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; - &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">artist</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Neutral Milk Hotel&#39;</span>
</span><span class='line'>      <span class="n">sorted_array</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;The Magnetic Fields&#39;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">album</span> <span class="o">==</span> <span class="s1">&#39;Get Lost&#39;</span>
</span><span class='line'>        <span class="n">sorted_array</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">sorted_array</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Fun&#39;</span>
</span><span class='line'>      <span class="n">sorted_array</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sorted_array</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the instructions to the lab suggested, I initialized an empty array with a nested structure tailored immaculately to the list used in the test. I used the <code>each</code> method to iterate over the <code>songs</code> array, first splitting it into <code>artist</code>, <code>album</code>, and <code>title</code> variables and discarding the <code>' - '</code> through parallel variable assignment. Next I used a <code>case</code> statement that funneled the songs into different paths based on the <code>artist</code> and (in just one case!) the <code>album</code>. Then I used <code>&lt;&lt;</code> to shovel each song into its comfortable, premade bed in my well-laid-out <code>sorted_array</code>. (Seriously, they look kind of like little beds!)</p>

<p>I didn&rsquo;t feel too great about writing this <code>case</code> statement, and doubly so for the <code>if</code>/<code>else</code> statement nested in one (and only one!) of the cases. The cases are so specific! When writing this I thought to myself, &ldquo;What if I added just one more pesky song to the list? This whole program would blow up!&rdquo;</p>

<p>Finally I returned the sorted array. This also didn&rsquo;t sit so well with me, as the method implements an &ldquo;<code>each</code> sandwich,&rdquo; where the <code>each</code> iterator is the meat and the bread is the empty <code>sorted_array</code> on top and the return of <code>sorted_array</code> at the bottom. Ruby has the <code>map</code> method (and its alias <code>collect</code>) that accomplish this same feat with just one method call.</p>

<p>This code passed the tests, but I wasn&rsquo;t satisfied. And for good reason: this method is totally useless outside the confines of this one test!</p>

<p>I wanted to make something that could take <em>any</em> song in the <code>"Artist - Album - Song"</code> format and return it in a nested array. But an array is simply not the natural way to conceptualize a music collection. A nested hash, on the other hand, is just right.</p>

<h3>Making a Hash</h3>

<p>It helped me to first conceptualize this array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">songs</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - The King of Carrot Flowers&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - Get Lost - You, Me, and the Moon&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Fun - Some Nights - Some Nights&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - Get Lost - Smoke and Mirrors&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - The Book of Love&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Fun - Some Nights - We Are Young&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - Parades Go By&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Fun - Some Nights - Carry On&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - Holland 1945&quot;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>as this hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">songs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Neutral Milk Hotel&quot;</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;In An Aeroplane Over the Sea&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;The King of Carrot Flowers&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Holland 1945&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Get Lost&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;You, Me, and the Moon&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Smoke and Mirrors&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;69 Love Songs&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;The Book of Love&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Parades Go By&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;Fun&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Some Nights&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;Some Nights&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;We Are Young&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Carry On&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a hash as the data structure in this method seemed to be a more logical choice because it&rsquo;s organized similarly to my own digital music library. At the top level, there is one large music directory (analogous to the <code>songs</code> hash) that contains all of the music on my computer. Inside the large music directory, there are a number of smaller directories (the top-level keys in the hash) named after different bands. Each band&rsquo;s directory contains that band&rsquo;s discography (the top-level values in the <code>songs</code> hash). I may have one or more albums (the keys in the nested hashes) by a given band, and each album has a tracklist (the values in the nested hashes), which can be expressed as a list of songs (or an array of strings).</p>

<p>The hash is also great because it can be very flexibly extended and it lends itself to creating a more abstract version of this program.</p>

<h3>An Abstract <code>sort_songs</code> Method</h3>

<p>Here is my improved <code>sort_songs</code> method that takes an array of songs and turns it into a hash like the one above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sort_songs</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sorted_music_library</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>    <span class="n">artist</span><span class="p">,</span> <span class="n">album</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; - &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">album</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">][</span><span class="n">album</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="n">album</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">][</span><span class="n">album</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">title</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hash_to_array</span><span class="p">(</span><span class="n">sorted_music_library</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method creates a <code>sorted_music_library</code> hash, then iterates over the <code>songs</code> array using the <code>each</code> method. If the artist is not a key in the hash, the hash is updated to include <code>artist</code> as a key with a value of <code>{ album =&gt; [title] }</code>. If the artist is a key in the hash but the album is not a key in the artist&rsquo;s nested hash, <code>{ album =&gt; [title] }</code> is added to the artist&rsquo;s nested hash using the destructive <code>merge!</code> method. Finally, if the artist and album are already in the <code>sorted_music_library</code> hash, the new song <code>title</code> is shoveled into the <code>album</code>&rsquo;s array of songs.</p>

<p>Finally, to make the tests pass, I called a separate <code>hash_to_array</code> method at the end of the <code>sort_songs</code> method that utilizes the <code>collect</code> method to drill down into the hash and return a nice, nested array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hash_to_array</span><span class="p">(</span><span class="n">music_library</span><span class="p">)</span>
</span><span class='line'>  <span class="n">music_library</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">artist</span><span class="p">,</span> <span class="n">discography</span><span class="o">|</span>
</span><span class='line'>    <span class="n">discography</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">album</span><span class="p">,</span> <span class="n">tracklist</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tracklist</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>        <span class="s2">&quot;</span><span class="si">#{</span><span class="n">artist</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">album</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">tracklist</span><span class="o">[</span><span class="n">tracklist</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">song</span><span class="p">)</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this code speaks for itself. That&rsquo;s the power of abstraction: it enables programmers to write more expressive code.</p>

<h3>Results</h3>

<p>When the <code>songs</code> array is sent to the abstracted <code>sort_songs</code> method, it returns the following array that makes the test pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sort_songs</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - The King of Carrot Flowers&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - Holland 1945&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - Get Lost - You, Me, and the Moon&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - Get Lost - Smoke and Mirrors&quot;</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - The Book of Love&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - Parades Go By&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;Fun - Some Nights - Some Nights&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Fun - Some Nights - We Are Young&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Fun - Some Nights - Carry On&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Don't Know How to Program]]></title>
    <link href="http://callahanchris.github.io/blog/2014/05/23/i-dont-know-how-to-program/"/>
    <updated>2014-05-23T14:52:35-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/05/23/i-dont-know-how-to-program</id>
    <content type="html"><![CDATA[<p>I was struck by this realization recently when going through Michael Hartl&rsquo;s <a href="http://railstutorial.org"><em>Ruby on Rails Tutorial</em></a>. This was my first exposure to Rails; however, I had learned a bit of Ruby before, and as such was under the impression that I knew a thing or two about coding.</p>

<p>Overall, the tutorial was difficult and intense, but at the end I felt very accomplished for having made it all the way through. I learned a ton about Rails, test-driven development (TDD), ERb, and Ruby. Of critical importance to this was my brother, <a href="http://andrewcallahan.github.io">Andrew Callahan</a>, who was on hand to help me with my questions and problems and to offer his insights on programming.</p>

<p>I learned some important lessons while undertaking this tutorial that I hope can help me in my transition from non-programmer to programmer.</p>

<h3>1. Environment is Essential</h3>

<p>Prior to taking on the Hartl Rails Tutorial, most of the programs I had written were in Ruby alone. In order to get these programs to run, all I needed was a text editor, a terminal, and a Ruby. This setup was relatively simple to get up and running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby file.rb</span></code></pre></td></tr></table></div></figure>


<p>Rails is a bit more complex. First, I installed the Rails gem, then when building the app I had to specify which gems I needed to use to get all aspects of the app up and running. Throughout this process, a number of dependencies were introduced and I had to do a bit of wrangling with version numbers to get everything working properly. I also installed the Ruby Version Manager (RVM) and got more familiar with using git, GitHub, and Heroku.</p>

<p>I got burned by not paying close attention to my environment when going through the Hartl tutorial. I started off using the Rails 4.0 version of the tutorial, and I used Rails 4.1 &mdash; the latest version at the time &mdash; when making my first example app. I then went back and saw that the Flatiron School <a href="http://prework.flatironschool.com">prework site</a> recommended going through the Rails 3.2 edition of the tutorial. I went back, installed Rails 3.2 and Ruby 1.9.3, and then made it through the first couple chapters of the tutorial without much issue.</p>

<p>The next day I was surprised to find that railstutorial.org had undergone a redesign, and the Rails 3.2 version of the book had gone behind a paywall. The Rails 4.0 version was still available for free &mdash; and what an incredible free resource it is! &mdash; so I tried to push forward by applying the instructions in the Rails 4.0 version to my Rails 3.2 app. This was a mistake. Eventually, I cut my losses and restarted the tutorial using Rails 4.0.</p>

<p>(As a side note, after writing the first draft of this blog post I made the same mistake as described above, but in reverse, on a <a href="http://teamtreehouse.com">Treehouse</a> Rails tutorial. I ended up having to restart the tutorial using a different version of Rails. I really need to pay better attention to accurately setting up my dev environment!)</p>

<p>Whereas before I considered programming to simply be the act of writing code, after making a sample app in Rails I realized that getting the proper environment set up can often be half the battle. Understanding the tools that make up the technology stack is incredibly important and is something I want to learn more about going forward.</p>

<h3>2. Read the Error Messages</h3>

<p>Another misconception I had was that code should generally work, and when it doesn&rsquo;t it should be debugged. This notion was turned completely on its head thanks to TDD, where code first fails and subsequently is made to work.</p>

<p>Even though I was following the code of the tutorial closely, some unexpected errors (in addition to the expected ones) inevitably popped up. Until Andrew pointed this out to me, I didn&rsquo;t realize that I had unconsciously just been glazing over the error messages showing up in the terminal. Prior to this, my &ldquo;process&rdquo; was essentially:</p>

<ul>
<li>See an error message surface.</li>
<li>Ignore its contents.</li>
<li>Immediately return to the text editor.</li>
<li>Guess what caused the error.</li>
<li>Try to fix what I guessed to be the problematic code.</li>
</ul>


<p>The error messages are there to help you; read them. This lesson seems really basic, but it is a great thing that I learned.</p>

<h3>3. Power Through</h3>

<p>Making a functioning Twitter-like app in Rails was hard. But that&rsquo;s OK &mdash; I have only done it one time, and had never done anything like it before going through Hartl&rsquo;s tutorial. I expected to be able to &ldquo;just get things&rdquo; before going in (remember, I &ldquo;knew&rdquo; about coding), and found that it was nowhere near that simple. After completing the tutorial, I realize that there are more areas that I don&rsquo;t understand than those I do. That&rsquo;s also OK &mdash; I am going to be learning all about Rails when I start at the <a href="http://flatironschool.com">Flatiron School</a> next month.</p>

<p>I tend to be meticulous and work slowly if I am trying to fully grasp the subject matter at hand. I could have easily spent twice as much time on the Rails tutorial than I did, but it&rsquo;s probably a good thing that I didn&rsquo;t. Instead of dwelling on everything I didn&rsquo;t understand, I powered through and practiced &ldquo;getting used to&rdquo; the things I didn&rsquo;t understand. Rather than obsessively going down each rabbit hole, I tried to keep an eye on the big picture and take things in stride.</p>

<h3>Conclusion</h3>

<p>I am excited to have begun learning how to program Rails applications and to be making progress on my path to becoming a professional web developer. Though I feel accomplished about completing the Hartl <em>Rails Tutorial</em>, working my way through it really made me realize how little I know and how much learning I have ahead of me. I am glad to have had a taste of the Rails development process and gleaned the lessons above.</p>

<p>I&rsquo;ll say it again: I don&rsquo;t know how to program. It&rsquo;s the truth. Now that I&rsquo;ve put that out there, the only way to go is up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog = Blog.new]]></title>
    <link href="http://callahanchris.github.io/blog/2014/05/20/blog-equals-blog-dot-new/"/>
    <updated>2014-05-20T15:29:04-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/05/20/blog-equals-blog-dot-new</id>
    <content type="html"><![CDATA[<p>This is the first post on my new blog. My name is Chris, and this blog will be about my journey from zero to hacker. As the first major step on the way to accomplishing this goal, I will be enrolling in the web development track at the Flatiron School in New York starting on June 2, 2014.</p>

<p>Over the course of the past year, I have started learning how to program &mdash; mainly Ruby, but also bits of C, HTML, CSS, JavaScript, and most recently Ruby on Rails. I am now working through the Flatiron School&rsquo;s excellent <a href="http://prework.flatironschool.com/web-development/">prework curriculum</a> in preparation for the course.</p>

<p>I&rsquo;m looking forward to writing down my thoughts and experiences along the way to becoming a professional web dev in this blog. I know that learning how to program will be difficult, so I am also looking forward to sharing some of my problems and difficulties along the way.</p>
]]></content>
  </entry>
  
</feed>
