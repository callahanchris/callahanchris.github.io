<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chris Callahan's Blog]]></title>
  <link href="http://callahanchris.github.io/atom.xml" rel="self"/>
  <link href="http://callahanchris.github.io/"/>
  <updated>2016-06-04T15:58:54-04:00</updated>
  <id>http://callahanchris.github.io/</id>
  <author>
    <name><![CDATA[Chris Callahan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging CouchDB Design Documents]]></title>
    <link href="http://callahanchris.github.io/blog/2016/06/04/debugging-couchdb-design-documents/"/>
    <updated>2016-06-04T15:40:09-04:00</updated>
    <id>http://callahanchris.github.io/blog/2016/06/04/debugging-couchdb-design-documents</id>
    <content type="html"><![CDATA[<p>When making changes to a CouchDB design document (or ddoc), I often use <code>curl</code> to make queries and see if the data returned is what I expected. Sometimes, however, this does not provide enough information to help me get to the bottom of why the ddoc does not behave as anticipated. Here is my process for debugging JavaScript code in CouchDB design documents. (Note: This blog post assumes CouchDB is <a href="https://pouchdb.com/guides/setup-couchdb.html#installing-couchdb">installed</a> and running on  your machine.)</p>

<p><strong>TL;DR: I show you how to use <code>console.log</code> debugging inside of CouchDB design documents.</strong></p>

<h2>How to Configure CouchDB</h2>

<p>The first step is to locate CouchDB&rsquo;s configuration settings on your machine. Type <code>couchdb -c</code> into the command line:</p>

<pre>
$ couchdb -c
/usr/local/etc/couchdb/default.ini
/usr/local/etc/couchdb/local.ini
/usr/local/etc/couchdb/local.d/couchdb-lucene.ini
</pre>


<p>This output is a list files containint of CouchDB&rsquo;s default configurations and any custom overrides you define. Open the <code>local.ini</code> file in your preferred text editor and navigate down to the <code>[log]</code> section. You may see the following text:</p>

<pre>
[log]
;level = debug
</pre>


<p>The leading semicolon indicates this line is commented out. I am not totally sure why CouchDB uses <code>.ini</code> files for its config files, as the database is primarily written in Erlang and contains a JavaScript runtime (SpiderMonkey).</p>

<p>Uncomment this line (delete the semicolon), restart CouchDB, and you will see quite a bit of output in the console, starting with something like this:</p>

<pre>
$ couchdb
Apache CouchDB 1.6.1 (LogLevel=debug) is starting.
Configuration Settings ["/usr/local/etc/couchdb/default.ini",
                        "/usr/local/etc/couchdb/local.ini",
                        "/usr/local/etc/couchdb/local.d/couchdb-lucene.ini"]:
# About 100 more lines of lots of nice config info follows
</pre>


<p>This being CouchDB, we can of course set the log level using Couch&rsquo;s HTTP API:</p>

<pre>
$ curl -X PUT 127.0.0.1:5984/_config/log/level -d '"info"'
"info"
</pre>


<p>(Note that you will have to pass in admin credentials here if the CouchDB you&rsquo;re running is not in <a href="http://guide.couchdb.org/draft/security.html#party">admin party</a> mode.)</p>

<p>The best part about this is that you don&rsquo;t have to restart the database, logging will begin immediately. Thanks, Erlang!</p>

<p>The CouchDB configuration settings can also be changed in the admin UI of Futon. Visit <code>http://localhost:5984/_utils</code>, log in if necessary, then click on &ldquo;Configuration&rdquo; on the righthand panel. If this looks familiar, it is because it is a web interface for the local config files listed when you ran <code>couchdb -c</code> above. You can edit the log level here as well &ndash; navigate down to the &ldquo;log&rdquo; section, double click on the text next to &ldquo;level&rdquo; (should be &ldquo;info&rdquo;), type in &ldquo;debug&rdquo;, and click the green check mark. You&rsquo;ll notice the following output gets logged by CouchDB:</p>

<pre>
=SUPERVISOR REPORT==== 4-Jun-2016::15:23:18 ===
     Supervisor: {local,couch_primary_services}
     Context:    child_terminated
     Reason:     normal
     Offender:   [{pid,<0.258.0>},
                  {id,couch_log},
                  {mfargs,{couch_log,start_link,[]}},
                  {restart_type,permanent},
                  {shutdown,brutal_kill},
                  {child_type,worker}]

[info] [<0.157.0>] 127.0.0.1 - - PUT /_config/log/level 200
</pre>


<p>The last line shows that under the hood the Futon UI is simply making the same <code>PUT</code> request over HTTP you made above using <code>curl</code> to change the log level. Above that there is a &ldquo;Supervisor Report&rdquo; from the CouchDB internals stating that the <code>couch_log</code> worker process was&hellip; abruptly?&hellip; restarted by the <code>couch_primary_services</code> supervisor process.</p>

<p>The CouchDB docs has a good roundup of <a href="http://docs.couchdb.org/en/1.6.1/config/logging.html">all of the different log levels</a> Couch supports. I typically stick with &ldquo;info&rdquo; in development to have a window into all of the incoming requests to CouchDB being logged in real time, but I&rsquo;ll sometimes switch to &ldquo;debug&rdquo; mode to view in more detail all of the headers / cookies that are part of the incoming HTTP requests. (Note that neither of these settings are recommended for logging in production.)</p>

<p>Now that you&rsquo;ve set up CouchDB to be a bit more verbose, run:</p>

<pre>
curl 127.0.0.1:5984
</pre>


<p>Back in CouchDB, you&rsquo;ll see the following output:</p>

<pre>
[debug] [<0.225.0>] 'GET' / {1,1} from "127.0.0.1"
Headers: [{'Accept',"*/*"},
          {'Host',"127.0.0.1:5984"},
          {'User-Agent',"curl/7.43.0"}]
[debug] [<0.225.0>] OAuth Params: []
[info] [<0.225.0>] 127.0.0.1 - - GET / 200
</pre>


<p>Simpy perusing the logs of incoming requests and outgoing responses can be very informative and helpful if something is going wrong. But you can also take the debugging one step further with <code>log</code>.</p>

<h2>&ldquo;<code>console.log</code> Debugging&rdquo; Inside CouchDB</h2>

<p>CouchDB exposes a global <code>log</code> function inside of design documents that allows you to write custom messages to CouchDB&rsquo;s logs. This is similar to using <code>console.log()</code> in the dev tools console in the browser or in node.</p>

<p>To see how this works in action, first create a new database and insert a design document:</p>

<pre>
$ curl -X PUT 127.0.0.1:5984/test
{
  "ok": true
}
$ curl -X PUT 127.0.0.1:5984/test/_design/test \
> -d '{ "_id": "_design/test", "views": { "greetingDocs": { "map": "function(doc) { if (doc.hello) { log(\"This doc says hello, \" + doc.hello); emit(doc._id, null); } }", "reduce": "_count" } } }'
{
  "ok": true,
  "id": "_design/test",
  "rev": "1-ea73ae4cba8ca3ca7618c23185ef92d2"
}
</pre>


<p>Here&rsquo;s roughly how that ddoc looks in JavaScript (sans stringified functions):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">_id</span><span class="o">:</span> <span class="s2">&quot;_design/test&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">views</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">greetingDocs</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">map</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">hello</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">(</span><span class="s2">&quot;This doc says hello, &quot;</span> <span class="o">+</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">hello</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">reduce</span><span class="o">:</span> <span class="s2">&quot;_count&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you&rsquo;ve got a barebones design doc, you can see the logging at work by adding a new document to the <code>test</code> database:</p>

<pre>
$ curl -X PUT 127.0.0.1:5984/test/one \
> -d '{ "_id": "one", "hello": "I am log" }'
{
  "ok": true,
  "id": "one",
  "rev": "1-6feff67ca27f6cc570f9ae43385730f8"
}
$ curl 127.0.0.1:5984/test/_design/test/_view/greetingDocs
{
  "rows": [
    { "key": null, "value" : 1 }
  ]
}
</pre>


<p>In the couch logs you will see something like this:</p>

<pre>
[debug] [<0.99.0>] 'GET' /test/_design/test/_view/greetingDocs {1,1} from "127.0.0.1"
Headers: [{'Accept',"*/*"},
          {'Host',"127.0.0.1:5984"},
          {'User-Agent',"curl/7.43.0"}]
[debug] [<0.99.0>] OAuth Params: []
[info] [<0.991.0>] Opening index for db: test idx: _design/test sig: "eff5145ec110e4f61dbe8a2b446588e8"
[info] [<0.996.0>] Starting index update for db: test idx: _design/test
[debug] [<0.715.0>] OS Process #Port<0.3200> Input  :: ["reset",{"reduce_limit":false,"timeout":5000}]
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: true
[debug] [<0.715.0>] OS Process #Port<0.3200> Input  :: ["add_fun","function(doc) { if (doc.hello) { log(\"This doc says hello, \" + doc.hello); emit(doc._id, null); } }"]
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: true
[debug] [<0.84.0>] New task status for <0.1001.0>: [{changes_done,3},
                                                    {database,<<"test">>},
                                                    {design_document,
                                                     <<"_design/test">>},
                                                    {progress,150},
                                                    {started_on,1465068874},
                                                    {total_changes,2},
                                                    {type,indexer},
                                                    {updated_on,1465068874}]
[debug] [<0.715.0>] OS Process #Port<0.3200> Input  :: ["map_doc",{"_id":"one","_rev":"1-6feff67ca27f6cc570f9ae43385730f8","hello":"I am log"}]
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: ["log","This doc says hello, I am log"]
[info] [<0.715.0>] OS Process #Port<0.3200> Log :: This doc says hello, I am log
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: [[["one",null]]]
[debug] [<0.991.0>] Updated index for db: test idx: _design/test seq: 2
[info] [<0.996.0>] Index update finished for db: test idx: _design/test
[debug] [<0.991.0>] Updated index for db: test idx: _design/test seq: 2
[info] [<0.99.0>] 127.0.0.1 - - GET /test/_design/test/_view/greetingDocs 200
</pre>


<p>It looks a bit cryptic, but towards the bottom you might notice four lines in particular:</p>

<pre>
[debug] [<0.715.0>] OS Process #Port<0.3200> Input  :: ["map_doc",{"_id":"one","_rev":"1-6feff67ca27f6cc570f9ae43385730f8","hello":"I am log"}]
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: ["log","This doc says hello, I am log"]
[info] [<0.715.0>] OS Process #Port<0.3200> Log :: This doc says hello, I am log
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: [[["one",null]]]
</pre>


<p>On the third line (with <code>Log ::</code>) we can see our message from <code>log</code>! It&rsquo;s also interesting to see the <code>Input</code> and <code>Output</code> CouchDB is writing here. First, in the <code>Input</code> line, the doc with <code>_id</code> of <code>"one"</code> that you just <code>PUT</code> to the database is being run through something called <code>map_doc</code>. This produces two <code>Output</code>s: first the log, and then the doc&rsquo;s <code>_id</code> and <code>null</code>, which were emitted using <code>emit(doc._id, null)</code> in the <code>map</code> function of the <code>greetingDocs</code> view.</p>

<p>Running the same query on the view again will <em>not</em> write the same message to the log. My speculation is that CouchDB caches the results of the <code>map</code> and <code>reduce</code> functions in its views, so the <code>map</code> function won&rsquo;t be run again (and therefore our message won&rsquo;t be logged again) until either the ddoc changes or a new document is added to / updated in the database.</p>

<p>Let&rsquo;s update the doc to test this assumption:</p>

<pre>
$ curl -X PUT 127.0.0.1:5984/test/one \
> -d '{ "_id": "one", "_rev": "1-6feff67ca27f6cc570f9ae43385730f8", "hello": "this is log()" }'
{
  "ok": true,
  "id": "one",
  "rev": "2-83ba9fe4df631f7e1af0b079baf1948b"
}
</pre>


<p>Indeed, when we query the view again, the CouchDB logs contain what we&rsquo;re looking for:</p>

<pre>
$ curl 127.0.0.1:5984/test/_design/test/_view/greetingDocs
{
  "rows": [
    { "key": null, "value" : 1 }
  ]
}
</pre>




<pre>
[debug] [<0.715.0>] OS Process #Port<0.3200> Input  :: ["map_doc",{"_id":"one","_rev":"2-83ba9fe4df631f7e1af0b079baf1948b","hello":"this is log()"}]
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: ["log","This doc says hello, this is log()"]
[info] [<0.715.0>] OS Process #Port<0.3200> Log :: This doc says hello, this is log()
[debug] [<0.715.0>] OS Process #Port<0.3200> Output :: [[["one",null]]]
</pre>


<h2>Wrapping up</h2>

<p><code>log</code> is a convenient way to quickly do <code>console.log</code> debugging inside of your CouchDB design documents. While a full-fledged debugger REPL like the one shown in <a href="https://jhs.iriscouch.com/files/debugger/debug.html">this video</a> seems quite amazing, you can still get quite far with good old <code>log</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Learning React &amp; Flux]]></title>
    <link href="http://callahanchris.github.io/blog/2015/01/16/resources-for-learning-react-and-flux/"/>
    <updated>2015-01-16T11:34:16-05:00</updated>
    <id>http://callahanchris.github.io/blog/2015/01/16/resources-for-learning-react-and-flux</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently had a few people ask me about resources for learning React.js and Flux, so I figured I&rsquo;d put all of the resources I&rsquo;ve used in one spot. Please leave a comment if you find any of these useful/useless or have any good resources I&rsquo;ve left out!</p>

<h3>Why React?</h3>

<p><em>The unexamined 3rd party library is not worth using</em></p>

<ul>
<li><a href="http://facebook.github.io/react/docs/why-react.html">Abridged Version</a></li>
<li><a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome">Unabridged Version</a></li>
</ul>


<h3>React Basics</h3>

<p><em>React 101</em></p>

<ul>
<li><a href="http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html">Basics on components, props, and state</a></li>
<li><a href="http://facebook.github.io/react/docs/thinking-in-react.html">Turning mockups into React components</a></li>
<li><a href="http://facebook.github.io/react/docs/multiple-components.html">Composing multiple components</a></li>
</ul>


<h3>Flux</h3>

<p><em>Facebook&rsquo;s architecture pattern for organizing large React apps</em></p>

<ul>
<li>Shameless plug: <a href="http://callahanchris.github.io/blog/2014/11/23/88-mph-with-flux-and-react/">My Intro to Flux blog post</a>
  &ndash; some helpful links on the bottom too</li>
<li><a href="http://blog.andrewray.me/flux-for-stupid-people/">Flux for Stupid People</a></li>
<li><a href="http://facebook.github.io/flux/docs/overview.html#content">Facebook&rsquo;s Flux Overview</a></li>
<li><a href="https://github.com/facebook/flux/tree/master/examples/flux-chat/">Facebook&rsquo;s Flux chat sample app</a> &ndash; great code to dive into for a standard implementation of Facebook-flavored Flux</li>
</ul>


<h3>React Router</h3>

<p><em>Inspired by Ember Router, a great addition to React apps</em></p>

<ul>
<li><a href="https://github.com/rackt/react-router/blob/master/docs/guides/overview.md">React Router overview</a></li>
<li><a href="https://github.com/rackt/react-router">Github repo</a></li>
</ul>


<h3>Server-Side Rendering</h3>

<p><em>Learn the way of <code>React.renderToString()</code></em></p>

<ul>
<li><a href="https://github.com/mhart/react-server-example">Simple React server example</a></li>
<li><a href="https://github.com/zertosh/ssr-demo-kit">React server-side rendering demo kit</a></li>
</ul>


<h3>Tutorials</h3>

<p><em>Learn by doing</em></p>

<ul>
<li><a href="https://github.com/mking/react-hn">Make Hacker News with React</a></li>
<li>Scotch.io React &amp; Flux tutorials:

<ol>
<li> <a href="https://scotch.io/tutorials/learning-react-getting-started-and-concepts">Learning React: Getting started and concepts</a></li>
<li> <a href="https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js">Build a real time Twitter stream with Node and React.js</a></li>
<li> <a href="https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture">Getting to know Flux, the React.js architecture</a></li>
<li> <a href="https://scotch.io/tutorials/creating-a-simple-shopping-cart-with-react-js-and-flux">Creating a simple shopping cart with React.js and Flux</a></li>
</ol>
</li>
<li><a href="https://twitter.com/biesnecker">John Biesnecker</a>&rsquo;s React Tutorials:

<ol>
<li> <a href="http://biesnecker.com/2014/10/21/building-a-card-game-war-in-react/">Building a card game (war) with React</a></li>
<li> <a href="http://biesnecker.com/2014/10/22/using-reactjs-to-draw-dynamic-svgs/">Using React.js to draw dynamic SVGs</a></li>
</ol>
</li>
</ul>


<h3>Cool React Projects</h3>

<p><em>React rocks</em></p>

<ul>
<li><a href="http://react.rocks/">react.rocks</a></li>
</ul>


<h3>Official Documentation</h3>

<p><em>Still the best and most comprehensive resource out there</em></p>

<ul>
<li><a href="http://facebook.github.io/react/docs/getting-started.html">React docs</a></li>
<li><a href="http://facebook.github.io/flux/docs/overview.html">Flux docs</a></li>
</ul>


<h3>Read the Source Code</h3>

<p><em>Your great changes to React &amp; Flux are just a pull request away&hellip;</em></p>

<ul>
<li><a href="https://github.com/facebook/react">React source code</a></li>
<li><a href="https://github.com/facebook/flux">Flux source code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array Iteration Methods in JavaScript]]></title>
    <link href="http://callahanchris.github.io/blog/2015/01/03/array-iteration-methods-in-javascript/"/>
    <updated>2015-01-03T15:55:19-05:00</updated>
    <id>http://callahanchris.github.io/blog/2015/01/03/array-iteration-methods-in-javascript</id>
    <content type="html"><![CDATA[<p>When I first started learning JavaScript, I went through a number of tutorials that showed how to iterate over collections in an imperative style using a <code>for</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">angLeeMovies</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Pushing Hands&#39;</span><span class="p">,</span> <span class="s1">&#39;The Wedding Banquet&#39;</span><span class="p">,</span> <span class="s1">&#39;Eat Drink Man Woman&#39;</span><span class="p">],</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">angLeeMovies</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">angLeeMovies</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; was directed by Ang Lee.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;Pushing Hands was directed by Ang Lee.&quot;</span>
</span><span class='line'><span class="c1">// &quot;The Wedding Banquet was directed by Ang Lee.&quot;</span>
</span><span class='line'><span class="c1">// &quot;Eat Drink Man Woman was directed by Ang Lee.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before ES5, this was the best available way to iterate over an array, but now there are a number of more expressive, idiomatic, and functional ways of iterating over JavaScript arrays.</p>

<h3>The Big Three: <code>map()</code>, <code>filter()</code> &amp; <code>reduce()</code></h3>

<h4><code>Array.prototype.map()</code></h4>

<p><code>map()</code> is the array method I find myself using all the time when writing JavaScript code. The conceit is simple: <code>map()</code> takes a callback function as a parameter, calls this function on each item in the array, and returns a new array of the same length as the initial array that contains the resulting values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">angLeeMovies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Life of Pi&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2012</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Taking Woodstock&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2009</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Lust, Caution&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2007</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Brokeback Mountain&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2005</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Hulk&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2003</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">releaseYears</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">releaseYears</span> <span class="o">=</span> <span class="nx">angLeeMovies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">movie</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">movie</span><span class="p">.</span><span class="nx">year</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">releaseYears</span><span class="p">);</span> <span class="c1">// [2012, 2009, 2007, 2005, 2003]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be simplified even further by extracting the function and passing it as an argument to <code>map()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">angLeeMovies</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span> <span class="p">],</span> <span class="nx">releaseYears</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">extractYear</span><span class="p">(</span><span class="nx">movie</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">movie</span><span class="p">.</span><span class="nx">year</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">releaseYears</span> <span class="o">=</span> <span class="nx">angLeeMovies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">extractYear</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">releaseYears</span><span class="p">);</span> <span class="c1">// [2012, 2009, 2007, 2005, 2003]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>movie</code> is being implicitly passed as an argument to the <code>extractYear()</code> function, but the behavior is the same as above.</p>

<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">MDN Documentation - Array.prototype.map()</a></em></p>

<h4><code>Array.prototype.filter()</code></h4>

<p><code>filter()</code> is intuitively named: it calls a callback function on each item in an array, filters out items that return a falsy value, and returns a new array with the remaining items (those that the callback returns a truthy value for).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">truthyAndFalsy</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="nx">truthy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">truthy</span> <span class="o">=</span> <span class="nx">truthyAndFalsy</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">truthy</span><span class="p">);</span> <span class="c1">// [1, 2, 3, 4, 5, 6, 7]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the opposite test case, we can see the seven falsy values in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">truthyAndFalsy</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span> <span class="p">],</span> <span class="nx">falsy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">falsy</span> <span class="o">=</span> <span class="nx">truthyAndFalsy</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">falsy</span><span class="p">);</span> <span class="c1">// [-0, 0, undefined, null, &quot;&quot;, NaN, false]</span>
</span></code></pre></td></tr></table></div></figure>


<p>While 0 being falsy is a &ldquo;classic JavaScript gotcha&rdquo;, the point remains that <code>filter()</code> is a powerful tool for collecting a subset of your data that matches certain criteria.</p>

<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">MDN Documentation - Array.prototype.filter()</a></em></p>

<h4><code>Array.prototype.reduce()</code></h4>

<p><code>reduce()</code> has been the hardest of all FP methods for me to fully embrace, but it can be extremely useful in certain cases. The core idea of <code>reduce()</code> is that it iterates over an array and returns exactly one value. The return value is commonly a sum or count of some property of the items in the array, but <code>reduce()</code> is quite flexible in what it can produce.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">angLeeMovies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Brokeback Mountain&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="s1">&#39;won&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Crouching Tiger, Hidden Dragon&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="s1">&#39;nominated&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Hulk&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Life of Pi&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="s1">&#39;won&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;The Ice Storm&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="kc">false</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">bestDirectorWins</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bestDirectorWins</span> <span class="o">=</span> <span class="nx">angLeeMovies</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">currentValue</span><span class="p">.</span><span class="nx">bestDirectorOscar</span> <span class="o">===</span> <span class="s1">&#39;won&#39;</span> <span class="o">?</span> <span class="nx">previousValue</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">previousValue</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bestDirectorWins</span><span class="p">);</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the <code>previousValue</code> argument is the accumulator that we increment if Ang Lee won an Oscar for best director for the movie we&rsquo;re iterating over, and the <code>currentValue</code> argument is item being iterated over. As there is no <code>previousValue</code> when iterating over the first item, we can initialize it to 0 as an optional second parameter to the <code>reduce()</code> function.</p>

<p>Though it can seem somewhat esoteric at first, <code>reduce()</code> has grown on me significantly in the past few months &ndash; partly because of using MapReduce views in CouchDB views, and partly because of learning more about the benefits of functional programming.</p>

<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">MDN Documentation - Array.prototype.reduce()</a></em></p>

<h3>Friends of <code>reduce()</code></h3>

<h4><code>Array.prototype.reduceRight()</code></h4>

<p>Having grasped <code>reduce()</code>, it is not a far stretch to get <code>reduceRight()</code>. Whereas <code>reduce()</code> iterates over an array from left to right, <code>reduceRight()</code> iterates from right to left. This does not make a difference for the standard sum/count use cases, but it can come in handy for other purposes. For example, if we have an array of Ang Lee movies sorted in reverse chronological order, we could use <code>reduceRight()</code> to sort these movies in chronological order by decade.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">angLeeMovies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Life of Pi&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2012</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Brokeback Mountain&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2005</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Crouching Tiger, Hidden Dragon&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2000</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;The Wedding Banquet&#39;</span><span class="p">,</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">1993</span><span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">moviesByDecade</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">addMovieToDecade</span><span class="p">(</span><span class="nx">filmography</span><span class="p">,</span> <span class="nx">decade</span><span class="p">,</span> <span class="nx">title</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">filmography</span><span class="p">[</span><span class="nx">decade</span><span class="p">]</span> <span class="o">?</span> <span class="nx">filmography</span><span class="p">[</span><span class="nx">decade</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="o">:</span> <span class="nx">filmography</span><span class="p">[</span><span class="nx">decade</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">title</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">filmography</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">moviesByDecade</span> <span class="o">=</span> <span class="nx">angLeeMovies</span><span class="p">.</span><span class="nx">reduceRight</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">currentValue</span><span class="p">.</span><span class="nx">year</span> <span class="o">&gt;=</span> <span class="mi">2010</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">addMovieToDecade</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="s2">&quot;2010s&quot;</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentValue</span><span class="p">.</span><span class="nx">year</span> <span class="o">&gt;=</span> <span class="mi">2000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">addMovieToDecade</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="s2">&quot;2000s&quot;</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">addMovieToDecade</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="s2">&quot;1990s&quot;</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="p">{});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moviesByDecade</span><span class="p">);</span>
</span><span class='line'><span class="c1">// {</span>
</span><span class='line'><span class="c1">//   &quot;1990s&quot;: [&quot;The Wedding Banquet&quot;],</span>
</span><span class='line'><span class="c1">//   &quot;2000s&quot;: [&quot;Crouching Tiger, Hidden Dragon&quot;, &quot;Brokeback Mountain&quot;],</span>
</span><span class='line'><span class="c1">//   &quot;2010s&quot;: [&quot;Life of Pi&quot;]</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight">MDN Documentation - Array.prototype.reduceRight()</a></em></p>

<h4><code>Array.prototype.every()</code></h4>

<p><code>every()</code> checks to see if all items in an array return a truthy value for the callback function. If they all do, <code>every()</code> returns <code>true</code>; otherwise, it returns <code>false</code>. Given what we know about <code>reduce()</code>, it seems like <code>every()</code> is achieving a similar purpose: boiling an array down to a single value. It is therefore pretty straightforward to implement our own version of <code>every()</code> based on <code>reduce()</code>. (Note, this is a simplified version, as <code>every()</code> can take an optional <code>thisArg</code> argument).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">myEvery</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">previousValue</span> <span class="o">?</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">)</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// every() returns true for empty arrays</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">myEvery</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="p">});</span> <span class="c1">// true</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">myEvery</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="p">});</span>  <span class="c1">// false</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">myEvery</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="p">});</span>  <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike my crude implementation, <code>every()</code> is optimized to return immediately if a falsy value is returned from the callback. Personally, I haven&rsquo;t used <code>every()</code> much &ndash; I prefer to use <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>.</p>

<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">MDN Documentation - Array.prototype.every()</a></em></p>

<h4><code>Array.prototype.some()</code></h4>

<p>Similar to <code>every()</code>, <code>some()</code> iterates over an array and returns <code>true</code> if any items in the array return a truthy value, and <code>false</code> if none do. This can also be (again, crudely) expressed in terms of <code>reduce()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">mySome</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">previousValue</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">previousValue</span> <span class="o">||</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// some() returns false for empty arrays</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">mySome</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="p">});</span> <span class="c1">// true</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">mySome</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="p">});</span>  <span class="c1">// true</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nx">mySome</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">num</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="p">});</span>  <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>


<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">MDN Documentation - Array.prototype.some()</a></em></p>

<h3>A More Expressive <code>for</code> Idiom?</h3>

<h4><code>Array.prototype.forEach()</code></h4>

<p>To me, <code>forEach()</code> appears to be a direct successor to the <code>for (i = 0; i &lt; x.length; i += 1) {}</code> example above. It is a basic iterator that gives you access to one item in an array at a time, and returns <code>undefined</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">angLeeMovies</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Brokeback Mountain&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="s1">&#39;won&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Crouching Tiger, Hidden Dragon&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="s1">&#39;nominated&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Hulk&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Life of Pi&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="s1">&#39;won&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;The Ice Storm&#39;</span><span class="p">,</span> <span class="nx">bestDirectorOscar</span><span class="o">:</span> <span class="kc">false</span><span class="p">}</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angLeeMovies</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">movie</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">movie</span><span class="p">.</span><span class="nx">bestDirectorOscar</span> <span class="o">===</span> <span class="s1">&#39;won&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Ang Lee won an Oscar for best director for &#39;</span> <span class="o">+</span> <span class="nx">movie</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">movie</span><span class="p">.</span><span class="nx">bestDirectorOscar</span> <span class="o">===</span> <span class="s1">&#39;nominated&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Ang Lee was nominated for an Oscar for best director for &#39;</span> <span class="o">+</span> <span class="nx">movie</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;Ang Lee won an Oscar for best director for Brokeback Mountain&quot;</span>
</span><span class='line'><span class="c1">// &quot;Ang Lee was nominated for an Oscar for best director for Crouching Tiger, Hidden Dragon&quot;</span>
</span><span class='line'><span class="c1">// &quot;Ang Lee won an Oscar for best director for Life of Pi&quot;</span>
</span><span class='line'><span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike the previous examples, <code>forEach()</code> is used to produce <a href="http://en.wikipedia.org/wiki/Side_effect_%28computer_science%29">&ldquo;side effects&rdquo;</a>. Practically speaking, because the return value of <code>forEach()</code> is always <code>undefined</code>, it can only be used to change the state of or interact with other parts of the program. This may seem like a fine distinction to some, but the use of side effects is a hotly contested debate across many programming language communities.</p>

<p>It is worth pointing out that <code>forEach()</code> is actually <a href="http://jsperf.com/foreach-vs-loop">significantly slower</a> than the <code>for (i = 0; i &lt; x.length; i += 1) {}</code> idiom. But for most purposes, <code>forEach()</code> is a much more expressive way to iterate over collections.</p>

<p><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">MDN Documentation - Array.prototype.forEach()</a></em></p>

<h3>Conclusion</h3>

<p>Iterating over arrays is a common task when coding in almost any language, and JavaScript is no exception. The above <code>Array.prototype</code> iterators are all defined in the ES5 spec and are widely supported on most modern web browsers (including IE 9 and above). They are relatively straightforward to use and make coding in JavaScript more functional and expressive.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype">MDN Array.prototype Documentation</a></li>
<li><a href="http://colintoh.com/blog/5-array-methods-that-you-should-use-today">Colin Toh - 5 Array Methods That You Should Be Using Now</a></li>
<li><a href="http://www.2ality.com/2011/04/iterating-over-arrays-and-objects-in.html">2ality - Iterating over arrays and objects in JavaScript</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[88 Mph With Flux and React]]></title>
    <link href="http://callahanchris.github.io/blog/2014/11/23/88-mph-with-flux-and-react/"/>
    <updated>2014-11-23T22:41:11-05:00</updated>
    <id>http://callahanchris.github.io/blog/2014/11/23/88-mph-with-flux-and-react</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/facebook/react">React.js</a> has gained a lot of attention since it was open sourced by Facebook last year, and with its recent version 0.12 release, it appears that a version 1.0 may soon be on the horizon. React is a lightweight front end toolkit for handling the view layer of web applications that emphasizes a unidirectional data flow to simplify logic about state and data binding. Under the hood, React utilizes a virtual DOM, diffing this with the <a href="http://www.w3.org/DOM/">plain old DOM</a> (PODOM) and rerendering the page with the minimal effort necessary to reflect the updated state of the application. This is an interesting abstraction that makes it easier to reason about state in an application and relieves the need for developers to directly manipulate the DOM.</p>

<p>This year, Facebook introduced Flux, the application architecture they use for React apps. Flux is more of a pattern for separating concerns and organizing files in large React applications than it is a full-blown front end framework like Angular or Ember. Flux provides a roadmap for ensuring the unidirectional flow of data in apps and allows for more modular processing of state changes, event handling, and interfacing with external services.</p>

<p>I think React in particular is relatively easy and intuitive to understand. It provides a sparse API that makes it quick to set up a few components, attach some event listeners to the DOM, and get an app up and running. <a href="http://jsx.github.io/">JSX</a>, a language that serves up a sugary mix of HTML and interpolated JavaScript (it compiles to JavaScript), is a bit odd at first. It&rsquo;s quite easy to get used to though, and remarkably it totally relieves you from the need to do string concatenation, which is a big plus.</p>

<p>Flux, on the other hand, takes a bit more time to fully grok. The conceit is simple: all data flows in one direction. But as I had previously primarily developed apps using the MVC architecture, Flux was a bit of a tough nut to crack.</p>

<p>In this blog post, I hope to make it clear how to get started using Flux in a React application.</p>

<h3>Conceptual Model</h3>

<p>Before I get into building the example app, it&rsquo;s important to take a moment to think about the big picture of Flux. Luckily, there is one phenomenal chart that shows how all of the pieces work together:</p>

<p><img src="http://facebook.github.io/react/img/blog/flux-diagram.png" alt="diagram" /></p>

<p>The key parts of a Flux application are:</p>

<ul>
<li>Actions</li>
<li>Dispatcher</li>
<li>Stores</li>
<li>Controller-View</li>
<li>Views</li>
</ul>


<p>Lesser roles are played by:</p>

<ul>
<li>Constants</li>
<li>Utils</li>
<li><a href="https://github.com/rackt/react-router">Router</a></li>
</ul>


<p>Keep in mind, this is all on the front end. React and Flux were explicitly intended to be back end agnostic. Plug in your favorite database and back end framework at will, should the need arise.</p>

<h3>Architecture</h3>

<p>Let&rsquo;s say we want to build a small app that keeps track of the speed of Doc Brown&rsquo;s DeLorean from <em>Back to the Future</em>, and lets users know if the flux capacitor has been activated yet &ndash; the deciding factor of whether or not time travel is possible at their current speed. Feel free to follow along with the project repo on <a href="https://github.com/callahanchris/bttf">github</a>.</p>

<p>Each of the key parts mentioned above gets their own folder in the file directory structure. A barebones Flux and React app (i.e. exclusively HTML, CSS, and JS files) should look something like this:</p>

<pre><code>.
├── css
|   └── styles.css
├── js
|   ├── actions
|   |   └── DeLoreanActionCreators.js
|   ├── components
|   |   ├── Accelerator.js
|   |   ├── DeLorean.js
|   |   ├── ImageSection.js
|   |   └── Speedometer.js
|   ├── constants
|   |   └── AppConstants.js
|   ├── dispatcher
|   |   └── AppDispatcher.js
|   ├── stores
|   |   └── DeLoreanStore.js
|   ├── app.js
|   └── bundle.js (this will be compiled automatically)
├── .gitignore
├── index.html
└── package.json
</code></pre>

<p>I&rsquo;ll use NPM for a package manager here. It is also <a href="http://facebook.github.io/react/downloads.html">easy</a> to drop in a link to Facebook&rsquo;s CDN or download React. Be aware that this does not include Flux, and with larger applications it makes sense to use a package manager where we can pull in several dependencies.</p>

<p>Here&rsquo;s the <code>package.json</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;bttf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Back to the Future-themed Flux + React app&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="s2">&quot;https://github.com/callahanchris/bttf&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;js/app.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;flux&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;object-assign&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;react&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.12.1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;browserify&quot;</span><span class="p">:</span> <span class="s2">&quot;^6.3.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;reactify&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.17.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;watchify&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.1.1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;watch&quot;</span><span class="p">:</span> <span class="s2">&quot;watchify -o js/bundle.js -v -d .&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;build&quot;</span><span class="p">:</span> <span class="s2">&quot;browserify js/app.js -o js/bundle.js&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Chris Callahan&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;browserify&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;transform&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;reactify&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the <code>index.html</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>88 mph With Flux and React<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/styles.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;bttf&quot;</span><span class="nt">&gt;&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the <code>js/app.js</code> file to bootstrap this app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">DeLorean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./components/Delorean&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">DeLorean</span> <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;bttf&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For now we&rsquo;ll use just one CSS file, <code>css/styles.css</code>. However, if the app gets big enough we might want to make the CSS more modular. One way we could do this is by using individual CSS files for each React component, (e.g. <code>css/Accelerator.css</code>, <code>css/DeLorean.css</code>, etc.).</p>

<h3>Writing the App&hellip; The Flux Way</h3>

<p>Although the actions are at the top of the foodchain, it helps to conceptualize the flow of a Flux app starting from the View layer.</p>

<p>At the top level of the View layer we have the &ldquo;Controller-View&rdquo;. For our purposes, this will be the DeLorean component that will wrap the entire application. The Controller-View is responsible for registering event listeners with the Stores, retrieving state from the Stores when the Stores emit an event, rerending the application with this new state using <code>this.setState()</code>, and passing the state down to nested components through props.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// js/components/DeLorean.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Accelerator</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./Accelerator&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ImageSection</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./ImageSection&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Speedometer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./Speedometer&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">DeLoreanStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../stores/DeLoreanStore&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">DeLorean</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">getInitialState</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="nx">speed</span><span class="o">:</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">DeLoreanStore</span><span class="p">.</span><span class="nx">addChangeListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_onChange</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">componentWillUnmount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">DeLoreanStore</span><span class="p">.</span><span class="nx">removeChangeListener</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_onChange</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fluxCapacitorActivated</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">speed</span> <span class="o">&gt;=</span> <span class="mi">88</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;delorean&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ImageSection</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">fluxCapacitorActivated</span><span class="p">()</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="o">&lt;</span><span class="nx">Accelerator</span> <span class="o">/&gt;</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Speedometer</span> <span class="nx">speed</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">speed</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">speed</span><span class="o">:</span> <span class="nx">DeLoreanStore</span><span class="p">.</span><span class="nx">getSpeed</span><span class="p">()})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">DeLorean</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Say that the Accelerator component contains a <code>&lt;button&gt;</code> element. Unable to resist the temptation, a user clicks the button. This triggers the <code>onClick</code> event handler we have embedded in this button, which calls the <code>handleClick</code> method defined on the Accelerator component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// js/components/Accelerator.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;react&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">DeLoreanActionCreators</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../actions/DeLoreanActionCreators&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Accelerator</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">handleClick</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">DeLoreanActionCreators</span><span class="p">.</span><span class="nx">accelerate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// hard-coded to show how data flows through Flux</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s1">&#39;accelerator&#39;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Activate</span> <span class="nx">the</span> <span class="nx">Flux</span> <span class="nx">Capacitor</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Accelerator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method sends a message to an Action Creator. Action Creators supply an API of accepted methods that can be invoked by components, and are also the place where information can break out of the Flux loop and communicate via <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XHR</a> with the back end, external APIs, a database, etc. In the case of this app, it would be a bit contrived to ping an API or a back end, so I will keep the DeLoreanActionCreators file super simple and handle the logic in the DeLoreanStore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// js/actions/DeLoreanActionCreators.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">AppDispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../dispatcher/AppDispatcher&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ActionTypes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/AppConstants&#39;</span><span class="p">).</span><span class="nx">ActionTypes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">accelerate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mph</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">handleViewAction</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCELERATE</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">mph</span><span class="o">:</span> <span class="nx">mph</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Action Creators can pass on any updated state they receive from the components to the Dispatcher along with a set action type. Typicially the name of the invoked method on the Action Creator mirrors the name of the action type. Action types are listed in the constants folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// js/constants/AppConstants.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ActionTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ACCELERATE</span><span class="o">:</span> <span class="s1">&#39;ACCELERATE&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">PayloadSources</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">SERVER_ACTION</span><span class="o">:</span> <span class="s1">&#39;SERVER_ACTION&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">VIEW_ACTION</span><span class="o">:</span> <span class="s1">&#39;VIEW_ACTION&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This set of SCREAMING_CAMEL_CASE constants serves as the one definitive source of what actions are legal in the Flux application. Don&rsquo;t overthink this &ndash; the sole purpose of the constants folder is for looking up constants. If the app gets large enough, you can get more modular in how you classify the constants, but at the end of the day all you want to know is what exactly are the officially sanctioned actions in this app.</p>

<p>Next, the AppDispatcher receives the <code>handleViewAction()</code> message along with the data above, which is referred to as the method argument <code>action</code> below. The AppDispatcher is a singleton in the Flux app and has two main functions: forwarding the data it receives from the actions to all stores, and keeping track of the callbacks registered by stores.</p>

<p>The AppDispatcher typically responds to messages sent from the Action Creators by calling the <code>dispatch()</code> method on itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// js/dispatcher/AppDispatcher.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Dispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;flux&#39;</span><span class="p">).</span><span class="nx">Dispatcher</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">PayloadSources</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/AppConstants&#39;</span><span class="p">).</span><span class="nx">PayloadSources</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assign</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;object-assign&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">AppDispatcher</span> <span class="o">=</span> <span class="nx">assign</span><span class="p">(</span><span class="k">new</span> <span class="nx">Dispatcher</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleViewAction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">source</span><span class="o">:</span> <span class="nx">PayloadSources</span><span class="p">.</span><span class="nx">VIEW_ACTION</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="nx">action</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleServerAction</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">source</span><span class="o">:</span> <span class="nx">PayloadSources</span><span class="p">.</span><span class="nx">SERVER_ACTION</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">action</span><span class="o">:</span> <span class="nx">action</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">payload</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">AppDispatcher</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dead simple. I think the choice of wording here was good, as it&rsquo;s just like an emergency dispatcher that broadcasts messages to EMTs in the field and keeps track of who&rsquo;s on duty.</p>

<p>Creating Dispatchers used to require a lot of boilerplate code, but a canonical Dispatcher has recently been packaged up as part of the Flux NPM module. Check out the Dispatcher&rsquo;s <a href="http://facebook.github.io/flux/docs/dispatcher.html">seriously simple builtin API</a> in the offical documentation to see what goes on under the hood here.</p>

<p>In a front end app, Stores are responsible for the logic that we typically associate with a model on the back end. Stores inherit from the prototype of node&rsquo;s EventEmitter, and are responsible for consuming the data passed down from the dispatcher, changing its state internally, and emitting an event which forces the whole app to update its state.</p>

<p>As I mentioned above, Stores also are required to register their callbacks with the AppDispatcher. The callback takes a payload as its argument, and then uses a <code>switch</code> statement to determine what actions to take based on the action type listed in the payload. (This action type is the same constant originally defined by the DeLoreanActionCreators way back when.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// js/stores/DeLoreanStore.js</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">AppDispatcher</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../dispatcher/AppDispatcher&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ActionTypes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../constants/AppConstants&#39;</span><span class="p">).</span><span class="nx">ActionTypes</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">assign</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;object-assign&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">CHANGE_EVENT</span> <span class="o">=</span> <span class="s1">&#39;change&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">_speed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">DeLoreanStore</span> <span class="o">=</span> <span class="nx">assign</span><span class="p">({},</span> <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">emitChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="nx">CHANGE_EVENT</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">addChangeListener</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">CHANGE_EVENT</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">removeChangeListener</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">CHANGE_EVENT</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getSpeed</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_speed</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">DeLoreanStore</span><span class="p">.</span><span class="nx">dispatchToken</span> <span class="o">=</span> <span class="nx">AppDispatcher</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">action</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">ActionTypes</span><span class="p">.</span><span class="nx">ACCELERATE</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">_accelerate</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">mph</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">DeLoreanStore</span><span class="p">.</span><span class="nx">emitChange</span><span class="p">();</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// noop</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">_accelerate</span><span class="p">(</span><span class="nx">mph</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_speed</span> <span class="o">+=</span> <span class="nx">mph</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">DeLoreanStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stores are the one place in a Flux application where state is officially defined. In a simple case, this may just be a running tally of how many times a button was clicked. Based on the action type, the Store&rsquo;s public methods will utilize private methods to update its privately held data. Finally, it emits a &lsquo;change&rsquo; event, and it&rsquo;s work is done.</p>

<p>Now we&rsquo;re back in React&rsquo;s View layer, but not so fast &ndash; the state of our application has changed! When the DeLorean component (our Controller-View) receives the new state from the DeLoreanStore, it calls its <code>setState()</code> method. This automatically triggers its <code>render()</code> method, which in turn triggers the <code>render()</code> methods of all of its nested components, and it&rsquo;s turtles all the way down.</p>

<p>All components in the app now have access to the data in its current state, and await further instructions.</p>

<h3>Closing Thoughts</h3>

<p>It took me a couple weeks, but I finally feel like I&rsquo;m understanding Flux, and I really like it! It provides a different way of reasoning about state and data flow in JavaScript applications. React is super straightforward, and as it approaches version 1.0, it is doing what it can to make its API <a href="https://www.youtube.com/watch?v=4anAwXYqLG8">even MORE simple</a> as well as compliant with new ES6 (and even ES7!) features. I&rsquo;m looking forward to delving into different libraries like RxJS and Immutable.js that take the ideas of functional reactive programming to the next level.</p>

<p>Please check out the full code of my sample app on <a href="https://github.com/callahanchris/bttf">github</a>!</p>

<h3>Resources</h3>

<ul>
<li><a href="http://facebook.github.io/flux/docs/overview.html">Flux Overview</a> &ndash; From the official documentation.</li>
<li><a href="https://www.youtube.com/watch?v=nYkdrAPrdcw">Jing Chen&rsquo;s Original Flux Presentation</a> &ndash; There&rsquo;s some good info about React in here as well, but the Flux part is from 10 to 24 minutes in.</li>
<li><a href="https://www.youtube.com/watch?v=i__969noyAM">React and Flux: Building Applications with a Unidirectional Data Flow</a> &ndash; Good talk by Bill Fisher and Jing Chen where they go through an example chat application in Flux and React.</li>
<li><a href="https://github.com/facebook/flux/tree/master/examples/flux-chat/">Flux Chat Example App on Github</a></li>
<li><a href="http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html">Flux: Actions and the Dispatcher</a> &ndash; Helpful post by Bill Fisher going into a bit more detail about the Dispatcher, Actions, and Action Creators.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behind the Scenes of the 'Has Many' Active Record Association]]></title>
    <link href="http://callahanchris.github.io/blog/2014/10/08/behind-the-scenes-of-the-has-many-active-record-association/"/>
    <updated>2014-10-08T16:17:09-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/10/08/behind-the-scenes-of-the-has-many-active-record-association</id>
    <content type="html"><![CDATA[<p>In <em>The Rails 4 Way</em>, Obie Fernandez describes what happens when you &ldquo;wire up&rdquo; associations (like <code>has_many</code> and <code>belongs_to</code>) between Active Record models:</p>

<blockquote><p>When these relationship declarations are executed, Rails uses some metaprogramming magic to dynamically add code to your models. In particular, proxy collection objects are created that let you manipulate the relationship easily.</p>

<p>&ndash; The Rails 4 Way, page 181</p></blockquote>

<p>What exactly is this &ldquo;metaprogramming magic&rdquo; that goes on behind the scenes? In this blog post, I hope to uncover exactly what happens when <code>has_many</code> is used in an Active Record model.</p>

<p><strong>TL;DR:</strong> When a class inherits from <code>ActiveRecord::Base</code>, it gets access to a large amount of class and instance methods, including the <code>has_many</code> class method. When <code>has_many</code> is called on a class, a  <code>GeneratedAssociationMethods</code> module is created on the fly and mixed into the class. A number of instance methods are then defined on this module (these vary depending on the type of association). These methods allow the original class to access and manipulate objects from the associated class passed as an symbol argument to the <code>has_many</code> method. Pretty magical if you ask me.</p>

<h3>Diving into the Source Code</h3>

<p>The Rails source code has always been intimidating for me. There&rsquo;s a ton of &ldquo;metaprogramming magic&rdquo; going on under the hood that appears incomprehensible or esoteric to a beginner. Though it&rsquo;s all written in Ruby, which I feel reasonably comfortable with, I&rsquo;m a total noob when it comes to metaprogramming, so my previous attempts to read the Rails source code have not gone very far.</p>

<p>I try not to feel too bad about this. I&rsquo;ve only been coding for about six months, and Rails has been constantly developed over the last ten years by some of the best programmers out there.</p>

<p>My first step was to go the source: <a href="https://github.com/rails/rails">the Rails source code</a>, that is. I cloned the master branch down to my computer, and started digging in.</p>

<pre><code>git clone git@github.com:rails/rails.git
</code></pre>

<p>I started to feel differently about the code once it was on my local machine. Suddenly I felt like I had more control over the code, just as I would with any other Ruby files open in Sublime Text on my computer. Rather than getting distracted by the complexity and sheer magnitude of the Rails codebase, I relied on techniques that I was already confident with and worked my way through from there.</p>

<p><strong>NOTE:</strong> I have pinned the links down to a commit in the Rails 4.1.4 era (when this post was written). Plenty of changes have been made since then, so be sure check out the latest version of the repo and investigate the code for yourself!</p>

<h3>Starting With What I Know</h3>

<p>Let&rsquo;s make a basic Rails app using <em>Game of Thrones</em> as its domain model. At first, I have two classes, <code>House</code> and <code>Character</code>, both of which inherit from <code>ActiveRecord::Base</code>. I&rsquo;d wire up the associations between these classes as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/house.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">House</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:characters</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/character.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Character</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:house</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This domain logic makes sense; in <em>Game of Thrones</em>, characters often introduce themselves in the fashion &ldquo;I am Arya of House Stark.&rdquo; Arya can be said to <em>belong to</em> House Stark, while House Stark can be said to <em>have many</em> characters (a collection, if you will) associated with it.</p>

<p>At this point, here&rsquo;s what I know about the code in the <code>House</code> model:</p>

<ul>
<li><p>The <code>House</code> class inherits from <code>ActiveRecord::Base</code>. This gives the <code>House</code> class and instances of this class access to a number of methods defined in the numerous modules included in the <code>ActiveRecord::Base</code> class. We can now say that the <code>House</code> class is an &ldquo;Active Record model&rdquo;, as opposed to a &ldquo;plain old Ruby object&rdquo;.</p></li>
<li><p>In Rails, an Active Record model is automatically mapped to a table in the database (in this case <code>houses</code>), and attributes (i.e. methods) are created in the model that correspond to each column in this database table. Similarly, each instance of an Active Record model &ldquo;wraps&rdquo; one row in this table. This is the key to Rails&rsquo;s adaptation of the Active Record pattern &ndash; database logic is effectively encapsulated into methods on the model layer.</p></li>
<li><p><code>has_many</code> is a &ldquo;bareword&rdquo;. In Ruby, barewords can only be local variables, method arguments, keywords (like <code>class</code>, <code>def</code>, and <code>end</code>), and method calls. In this context, it&rsquo;s neither a local variable nor a method argument, and it&rsquo;s certainly not a keyword. Therefore it must be a method.</p></li>
<li><p>If <code>has_many</code> is a method, then in this context its receiver must be the <code>House</code> class. That makes <code>has_many</code> a class method. It could also be written as <code>self.has_many</code>, but the receiver is implicit here so we don&rsquo;t need to write <code>self</code>.</p></li>
<li><p>It then follows that <code>:characters</code> is a method argument passed to the <code>has_many</code> method. Ruby allows you to leave off the parentheses surrounding method arguments, though it is generally good practice to keep the parentheses in when defining a method with arguments.</p></li>
</ul>


<p>Knowing that <code>has_many</code> is a class method defined somewhere in Active Record helped to narrow things down. From here, it was very easy to track the method definition down by doing a global search for <code>def has_many</code> on the codebase using <code>Command + Shift + f</code> in Sublime Text! Only one result appeared &ndash; a <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations.rb#L1245">two-line method</a> in the <code>ActiveRecord::Associations::ClassMethods</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">scope</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">extension</span><span class="p">)</span>
</span><span class='line'>  <span class="n">reflection</span> <span class="o">=</span> <span class="ss">Builder</span><span class="p">:</span><span class="ss">:HasMany</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">extension</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Reflection</span><span class="o">.</span><span class="n">add_reflection</span> <span class="nb">self</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">reflection</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Taking it One Line at a Time</h3>

<p>The <code>has_many</code> method signature is actually quite straightforward. Also, there is a copious amount (~200 lines) of <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations.rb#L1054">documentation</a> directly above the method definition that describes what <code>has_many</code> is, gives examples of how to use it, details the methods that are added when a <code>has_many</code> association is declared, and describes what all of the method arguments it takes are.</p>

<p>Here&rsquo;s a quick rundown of the arguments that <code>has_many</code> can take:</p>

<ul>
<li><p><code>name</code>: The only required method argument here. The name conventionally takes a symbol the plural form and references a collection embodied by another class. In our case, <code>:characters</code> is passed in as the <code>name</code> parameter. The <code>:characters</code> collection refers to multiple instances of the <code>Character</code> class (or rows of the <code>characters</code> table in the database) that we want to associate with one instance of the <code>House</code> class. This is the one-to-many relationship that lets us know we should use the <code>has_many</code> association to begin with.</p></li>
<li><p><code>scope</code>: Defaults to <code>nil</code>. A scope must be an object with a <code>call</code> method, so <code>lambda</code>s are generally used here. Scopes can help you narrow in on a more targeted set of records to retrieve from the database. In our example, if we only wanted to associate living characters with their houses, we&rsquo;d use the following scope:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">House</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:characters</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">deceased</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Though this might get complicated when dealing with the Iron Islands&hellip;)</p>

<ul>
<li><p><code>options</code>: Defaults to an empty hash. Here you can further customize the nature of the association. Some common options to pass here are <code>through: :join_table</code>, <code>dependent: :destroy</code>, <code>polymorphic: true</code>, and <code>foreign_key: :uuid</code>.</p></li>
<li><p><code>&amp;extension</code>: Explicit block argument, as indicated by the ampersand. I have never used this before, but the comments <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations.rb#L1149">suggest</a> that association extensions are &ldquo;useful for adding new finders, creators and other factory-type methods to be used as part of the association.&rdquo;</p></li>
</ul>


<p>To figure out the next line, I first tracked down the <code>ActiveRecord::Associations::Builder::HasMany</code> class, which is quite slim, containing just three one-line methods! Unfortunately, <code>build</code> is not one of these methods. I traversed up the inheritance hierarchy, from <code>ActiveRecord::Associations::Builder::HasMany</code> to <code>ActiveRecord::Associations::Builder::CollectionAssociation</code> and finally to <code>ActiveRecord::Associations::Builder::Association</code>, where the class method <code>build</code> is <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations/builder/association.rb#L28">defined</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">build</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">model</span><span class="o">.</span><span class="n">dangerous_attribute_method?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;You tried to define an association named </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> on the model </span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">, but &quot;</span> <span class="p">\</span>
</span><span class='line'>                         <span class="s2">&quot;this will conflict with a method </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> already defined by Active Record. &quot;</span> <span class="p">\</span>
</span><span class='line'>                         <span class="s2">&quot;Please choose a different association name.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">builder</span> <span class="o">=</span> <span class="n">create_builder</span> <span class="n">model</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
</span><span class='line'>  <span class="n">reflection</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>  <span class="n">define_accessors</span> <span class="n">model</span><span class="p">,</span> <span class="n">reflection</span>
</span><span class='line'>  <span class="n">define_callbacks</span> <span class="n">model</span><span class="p">,</span> <span class="n">reflection</span>
</span><span class='line'>  <span class="n">define_validations</span> <span class="n">model</span><span class="p">,</span> <span class="n">reflection</span>
</span><span class='line'>  <span class="n">builder</span><span class="o">.</span><span class="n">define_extensions</span> <span class="n">model</span>
</span><span class='line'>  <span class="n">reflection</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ActiveRecord::Associations::Builder::Association::build</code> method takes 5 arguments. The latter four of these arguments are identical to those initially passed to <code>has_many</code>. The first method argument is referred to as <code>model</code> in <code>build</code>&rsquo;s method signature. Inside the <code>has_many</code> method, the value passed as this argument is <code>self</code>.</p>

<p>Given that the <code>has_many</code> method is inside the <code>ActiveRecord::Associations::ClassMethods</code> module, I assumed that somewhere along the line this module is being mixed into a class. The value of <code>self</code> inside a class method is the class itself &ndash; that is, whichever class called the <code>has_many</code> method to begin with (in our case <code>House</code>).</p>

<p>I had a difficult time tracking down where, if anywhere, this module is mixed in to the <code>House</code> class. Then I had a stunning (and obvious) realization: this module is mixed in to <em>every single Active Record model!</em> From here, it was easy to hunt down <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/base.rb#L304">the offending code</a> in &ndash; where else? &ndash; <code>ActiveRecord::Base</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">Associations</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we know that in our example, <code>House</code> and <code>:characters</code> are being passed as the <code>model</code> and <code>name</code> arguments to the <code>build</code> method.</p>

<h3>Locating the &ldquo;Metaprogramming Magic&rdquo;</h3>

<p>The <code>build</code> method first checks if the <code>name</code> parameter is &ldquo;dangerous&rdquo;, and if so it throws an error. The <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/attribute_methods.rb#L128">comment</a> above the <code>dangerous_attribute_name?</code> method states that &ldquo;a method name is &lsquo;dangerous&rsquo; if it is already (re)defined by Active Record, but not by any ancestors. (So &lsquo;puts&rsquo; is not dangerous but &lsquo;save&rsquo; is.)&rdquo;</p>

<p>Barring any unforeseen danger, the <code>build</code> method then passes all of its method arguments to the <code>create_builder</code> method, which is called on an implicit receiver. In this context, <code>self</code> is referring to the <code>ActiveRecord::Associations::Builder::HasMany</code> class. The <code>create_builder</code> method checks that the <code>name</code> argument passed to it (<code>:characters</code>) is a symbol, then instantiates a new instance of the <code>ActiveRecord::Associations::Builder::HasMany</code> class. This object is stored as <code>builder</code>, a local variable in the <code>build</code> method above.</p>

<p>Next, the <code>build</code> instance method (different from the <code>build</code> class method) is called on the <code>builder</code> object. The <code>build</code> instance method takes a model (<code>House</code>) as a method argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Reflection</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">macro</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">model</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only new thing here is <code>macro</code>, which is a method <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations/builder/has_many.rb#L3">defined</a> on the <code>ActiveRecord::Associations::Builder::HasMany</code> model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">macro</span>
</span><span class='line'>  <span class="ss">:has_many</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ActiveRecord::Reflections::create</code> method <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L15">delegates</a> based on the <code>macro</code> passed to it. In our case, it instantiates an instance of <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L570">the <code>ActiveRecord::Reflection::HasManyReflection</code> class</a>, which inherits from <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L249">the <code>ActiveRecord::Reflection::Association</code> class</a>. I&rsquo;m still not totally clear what reflections in general do, but <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L41">this bit of documentation</a> was helpful:</p>

<blockquote><p>Reflection enables interrogating of Active Record classes and objects about their associations and aggregations. This information can, for example, be used in a form builder that takes an Active Record object and creates input fields for all of the attributes depending on their type and displays the associations to other objects.</p></blockquote>

<p>The value returned is this instance of the <code>ActiveRecord::Reflection::HasManyReflection</code> class, and the original method <code>ActiveRecord::Associations::Builder::HasMany::build</code> class method stores this object to a local variable <code>reflection</code>.</p>

<p>Once I knew what the <code>model</code> and <code>reflection</code> local variables were, it was relatively easy to locate the <code>define_accessors</code>, <code>define_callbacks</code>, <code>define_validations</code>, and <code>define_extensions</code> methods, as they were all in <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations/builder/association.rb#L99">the same file as the <code>build</code> method</a>. In this blog post, I&rsquo;ll only get into the <code>define_accessors</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Defines the setter and getter methods for the association</span>
</span><span class='line'><span class="c1"># class Post &lt; ActiveRecord::Base</span>
</span><span class='line'><span class="c1">#   has_many :comments</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Post.first.comments and Post.first.comments= methods are defined by this method...</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_accessors</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">reflection</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mixin</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generated_association_methods</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">reflection</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="n">define_readers</span><span class="p">(</span><span class="n">mixin</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">define_writers</span><span class="p">(</span><span class="n">mixin</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_readers</span><span class="p">(</span><span class="n">mixin</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mixin</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">    def #{name}(*args)</span>
</span><span class='line'><span class="sh">      association(:#{name}).reader(*args)</span>
</span><span class='line'><span class="sh">    end</span>
</span><span class='line'><span class="no">  CODE</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_writers</span><span class="p">(</span><span class="n">mixin</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mixin</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">    def #{name}=(value)</span>
</span><span class='line'><span class="sh">      association(:#{name}).writer(value)</span>
</span><span class='line'><span class="sh">    end</span>
</span><span class='line'><span class="no">  CODE</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was it. After much searching, I had found the &ldquo;metaprogramming magic&rdquo; at the core of Active Record associations.</p>

<h3>Interpreting the &ldquo;Metaprogramming Magic&rdquo;</h3>

<p>Again, I had to start with what I know here. Two method arguments are passed to <code>define_accessors</code>: <code>model</code> and <code>reflection</code>. When the <code>build</code> method calls <code>define_accessors</code>, it uses the same names for these arguments. Back in the <code>build</code> method, <code>model</code> referred to the <code>House</code> Active Record model, and <code>reflection</code> referred to the instance of the <code>ActiveRecord::Reflection::HasManyReflection</code> class.</p>

<p>Moving on to the next line, I found the <code>generated_association_methods</code> method is called on <code>House</code> and the return value is stored in a local variable <code>mixin</code>. I tracked down <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/core.rb#L194">the method definition</a> of <code>generated_association_methods</code> in the <code>ActiveRecord::Core::ClassMethods</code> module, alongside classics such as <code>find</code> and <code>find_by</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">generated_association_methods</span>
</span><span class='line'>  <span class="vi">@generated_association_methods</span> <span class="o">||=</span> <span class="k">begin</span>
</span><span class='line'>    <span class="n">mod</span> <span class="o">=</span> <span class="nb">const_set</span><span class="p">(</span><span class="ss">:GeneratedAssociationMethods</span><span class="p">,</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">include</span> <span class="n">mod</span>
</span><span class='line'>    <span class="n">mod</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was really stumped by this one. For one thing, I was distracted by the <code>begin...end</code> block and the PascalCase symbol. I had to take a step back and remember this is just Ruby code! Soon, I realized that this method memoizes the value of a class instance variable <code>@generated_association_methods</code>.</p>

<p>As it turns out, <code>const_set</code> is an instance method on the <code>Module</code> class in <a href="http://ruby-doc.org/core-2.1.3/Module.html#method-i-const_set">the Ruby core library</a>. <code>const_set</code> takes two arguments: the first is a string or symbol that will be the name of the new constant you&rsquo;re creating, and the second argument is an object that will be set to the value of this constant. The constant is then namespaced under the receiver of the <code>const_set</code> message.</p>

<p>In this case, <code>const_set</code> has an implicit receiver (<code>self</code>). It&rsquo;s tempting to think that <code>self</code> is the <code>ActiveRecord::Core::ClassMethods</code> module, but as above, this module is actually mixed in to the <code>House</code> class when we have it inherit from <code>ActiveRecord::Base</code>. The receiver here is actually <code>House</code>. Thus, this method creates a new module in the <code>House</code> namespace: <code>House::GeneratedAssociationMethods</code>. (Note that <code>House::GeneratedAssociationMethods</code> is the return value here, but if we were assigning pretty much anything but a new class or module as <code>GeneratedAssociationMethods</code>&rsquo;s value here, the return value would be that value.)</p>

<p>On the next line of this method, the <code>House::GeneratedAssociationMethods</code> module is included into the <code>House</code> class. This is pretty awesome &ndash; I had no idea that you could call <code>include</code> from inside a class method. It totally makes sense though, as the receiver is the class itself, so the use of <code>include</code> here is no different than the typical use of <code>include</code> in the class namespace.</p>

<p>Finally, the <code>House::GeneratedAssociationMethods</code> module is returned, and thus is set as the value of the <code>@generated_association_methods</code> class instance variable. Back in the <code>define_accessors</code> method, this constant is stored as the <code>mixin</code> variable.</p>

<p>Going on to the next line of the <code>define_accessors</code> method, the <code>name</code> message is passed to the <code>reflection</code> variable (our instance of the <code>ActiveRecord::Reflection::HasManyReflection</code> class). This object has <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L176">an <code>attr_reader</code> for name</a>, which is <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L191">set upon initialization</a>. If it&rsquo;s not too far a stretch back to remember, the <code>name</code> attribute here is set to the original <code>name</code> passed as the first argument of the <code>has_many</code> method. A refresher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">House</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:characters</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>name</code> is simply <code>:characters</code>!</p>

<p><code>define_accessors</code> delegates to <code>define_readers</code> and <code>define_writers</code>, passing <code>House::GeneratedAssociationMethods</code> and <code>:characters</code> as the <code>mixin</code> and <code>name</code> arguments to both of these methods. For simplicity, I will just focus on the <code>define_readers</code> method.</p>

<h3>A Metaprogrammed Method</h3>

<p>From here, it is relatively clear to see what happens next. Let&rsquo;s look at <code>define_readers</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">define_readers</span><span class="p">(</span><span class="n">mixin</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mixin</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">    def #{name}(*args)</span>
</span><span class='line'><span class="sh">      association(:#{name}).reader(*args)</span>
</span><span class='line'><span class="sh">    end</span>
</span><span class='line'><span class="no">  CODE</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aside of a few things in the first line of this method, this actually looks pretty straightforward: we&rsquo;ve got a new method definition on our hands!</p>

<p>On the first line of the method, <code>class_eval</code> is called on the <code>House::GeneratedAssociationMethods</code> module. <code>class_eval</code> is another instance method of the <code>Module</code> class in Ruby&rsquo;s core library. It takes a string as an argument, as well as optional parameters for filename and line number. From <a href="http://ruby-doc.org/core-2.1.3/Module.html#method-i-class_eval">the documentation</a>:</p>

<blockquote><p><strong>class_eval(string [, filename [, lineno]]) → obj</strong></p>

<p>Evaluates the string or block in the context of <strong>mod</strong>, except that when a block is given, constant/class variable lookup is not affected. This can be used to add methods to a class. <code>module_eval</code> returns the result of evaluating its argument. The optional <strong>filename</strong> and <strong>lineno</strong> parameters set the text for error messages.</p></blockquote>

<p>As suspected, <code>class_eval</code> allows us to add methods to a module or class. In this case, we are adding methods to the <code>House::GeneratedAssociationMethods</code> module. As this module has already been <code>include</code>d in <code>House</code>, these new methods can be accessed by instances of the <code>House</code> class.</p>

<p>Let&rsquo;s look at the parameters being passed to this method:</p>

<ul>
<li><code>string</code>: The string being passed to the <code>class_eval</code> method is a heredoc denoted by <code>&lt;&lt;-CODE ... CODE</code>. The contents are a dynamic method definition that will look like this in the example we&rsquo;re working with:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">characters</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">association</span><span class="p">(</span><span class="ss">:characters</span><span class="p">)</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>filename</code>: I am still not entirely sure what <code>__FILE__</code> precisely refers to, but I believe it refers to the current file. I am also not very clear about what this means in this context. My educated guess is that it refers to the <code>app/models/house.rb</code> file, but really the method is being added to the <code>House::GeneratedAssociationMethods</code> module, which was created dynamically and doesn&rsquo;t have a file at all!</p></li>
<li><p><code>lineno</code>: Again, I&rsquo;m not too clear about this one. The <a href="http://ruby-doc.org/docs/keywords/1.9/Object.html#method-i-__LINE__">documentation</a> is sparse here, only stating that <code>__LINE__</code> refers to &ldquo;The line number, in the current source file, of the current line.&rdquo;</p></li>
</ul>


<p>Almost there! We&rsquo;ve now got our method definitions, but what do <code>association</code> and <code>reader</code> refer to?</p>

<h3>Associations, Caching, and Reflections</h3>

<p>It turns out that <code>association</code> is an <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations.rb#L150">instance method</a> of the <code>ActiveRecord::Associations</code> module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">association</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="n">association</span> <span class="o">=</span> <span class="n">association_instance_get</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">association</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">AssociationNotFoundError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span> <span class="k">unless</span> <span class="n">reflection</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">_reflect_on_association</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">association</span> <span class="o">=</span> <span class="n">reflection</span><span class="o">.</span><span class="n">association_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">reflection</span><span class="p">)</span>
</span><span class='line'>    <span class="n">association_instance_set</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">association</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">association</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>association</code> method will pull the association specified by the <code>name</code> argument passed to it (in our case <code>:characters</code>)  out of the <code>@association_cache</code> instance variable if it has already been loaded into memory. As <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/core.rb#L533">defined</a> in the <code>ActiveRecord::Core</code> module, <code>@association_cache</code> is initialized to an empty Hash. Interestingly, this happens whenever you <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/core.rb#L266">instantiate an Active Record object</a> using the <code>House.new</code> syntax!</p>

<p>If the association is not in the <code>@association_cache</code> (i.e. it hasn&rsquo;t been loaded into memory), then the <code>association</code> method checks whether the class where the association is defined (<code>House</code>) lists the associated class (<code>Character</code>) as one of its <code>_reflections</code> (a <code>class_attribute</code> which is also <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L11">initialized to an empty hash</a>). The only way to <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/reflection.rb#L33">add a reflection</a> to this hash is through the <code>add_reflection</code> module method. Remember where this is called?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">scope</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{},</span> <span class="o">&amp;</span><span class="n">extension</span><span class="p">)</span>
</span><span class='line'>  <span class="n">reflection</span> <span class="o">=</span> <span class="ss">Builder</span><span class="p">:</span><span class="ss">:HasMany</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">scope</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">extension</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Reflection</span><span class="o">.</span><span class="n">add_reflection</span> <span class="nb">self</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">reflection</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the case of our domain model, the second line of the <code>has_many</code> method will add the key <code>"characters"</code> pointing to the value of our <code>reflection</code> from above &ndash; the instance of the <code>ActiveRecord::Reflection::HasManyReflection</code> class &ndash; to the <code>_reflections</code> hash.</p>

<p>Let&rsquo;s make an instance of the <code>House</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">stark</span> <span class="o">=</span> <span class="no">House</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">surname</span><span class="p">:</span> <span class="s2">&quot;Stark&quot;</span><span class="p">,</span> <span class="ss">sigil</span><span class="p">:</span> <span class="s2">&quot;Direwolf&quot;</span><span class="p">,</span> <span class="ss">motto</span><span class="p">:</span> <span class="s2">&quot;Winter is coming.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; #&lt;House id: 1, surname: &quot;Stark&quot;, sigil: &quot;Direwolf&quot;, motto: &quot;Winter is coming.&quot;, created_at: &quot;2014-10-09 20:05:01&quot;, updated_at: &quot;2014-10-09 20:05:01&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we call <code>stark.characters</code>, Rails first checks whether <code>"characters"</code> is a key in <code>House</code>&rsquo;s <code>_reflections</code> hash. If so, a new object is instantiated based on the type of this reflection &ndash; in the case of <code>has_many</code>, it&rsquo;s an instance of the <code>ActiveRecord::Associations::HasManyAssociation</code> class. The <code>association</code> method then calls <code>association_instance_set</code>, passing <code>:characters</code> and this instance of <code>ActiveRecord::Associations::HasManyAssociation</code> as its parameters. This key value pair is then <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations.rb#L169">added to the <code>@association_cache</code> instance variable</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">association_instance_set</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">association</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@association_cache</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="n">association</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>association</code> local variable is returned from the <code>association</code> method above, and then is sent the <code>reader</code> message, which is <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations/collection_association.rb#L29">defined</a> in the <code>ActiveRecord::Associations::CollectionAssociations</code> class, the superclass of <code>ActiveRecord::Associations::HasManyAssociation</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Implements the reader method, e.g. foo.items for Foo.has_many :items</span>
</span><span class='line'><span class="k">def</span> <span class="nf">reader</span><span class="p">(</span><span class="n">force_reload</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">force_reload</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">uncached</span> <span class="p">{</span> <span class="n">reload</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">stale_target?</span>
</span><span class='line'>    <span class="n">reload</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@proxy</span> <span class="o">||=</span> <span class="no">CollectionProxy</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A Return Value at the End of the Tunnel</h3>

<p>Here on the last line of the <code>reader</code> method was <code>@proxy</code>, the final value that is returned by the newly minted <code>characters</code> method. This <code>@proxy</code> instance variable is also the one alluded to by Obie Fernandez when he says &ldquo;proxy collection objects are created that let you manipulate the relationship easily.&rdquo;</p>

<p>Here is where it gets interesting: the <code>ActiveRecord::Associations::CollectionProxy</code> class <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/associations/collection_proxy.rb#L30">inherits from</a> <code>ActiveRecord::Relation</code>, which is the main class in Rails that deals with <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/relation.rb">database operations</a>. From here, we have to go all the way up the inheritance chain to the <code>ActiveRecord::Delegation::ClassMethods</code> module to find <a href="https://github.com/rails/rails/tree/30ea1a70cba1124893b2479cb7f277cb260ddfcd/activerecord/lib/active_record/relation/delegation.rb#L105">the <code>create</code> method used here</a>.</p>

<p>Now when we call <code>stark.characters</code>, we know without a shadow of a doubt what our return value will be!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">stark</span><span class="o">.</span><span class="n">characters</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; [#&lt;Character id: 1, name: &quot;Arya&quot;, age: 11, catchphrase: &quot;Stick them with the pointy end.&quot;, house_id: 1, created_at: &quot;2014-10-09 20:07:27&quot;, updated_at: &quot;2014-10-09 20:07:27&quot;&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm. From inside the Rails console, this looks like an array. Let&rsquo;s check out the class of this collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">stark</span><span class="o">.</span><span class="n">characters</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; Character::ActiveRecord_Associations_CollectionProxy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better.</p>

<h3>Conclusion</h3>

<p>This post was a good exercise for me to get more comfortable delving into the Rails source code, to begin to wrap my head around some of the legendary &ldquo;Rails magic&rdquo;, and to learn a bit more about metaprogramming in the wild. This is just the tip of the iceberg, but I no longer feel the Rails source code is untouchable. In fact, it&rsquo;s all just a bunch of great Ruby code!</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/rails/rails">Read the Rails source code on Github.</a> It&rsquo;s terrifying and awesome.</li>
<li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html">Ruby on Rails API Documentation for <code>ActiveRecord::Associations::ClassMethods</code></a></li>
<li><a href="http://ruby-doc.org/core-2.1.3/Module.html">Ruby Core Documentation for Class: Module</a></li>
<li><a href="https://leanpub.com/tr4w"><em>The Rails 4 Way</em></a></li>
<li><a href="http://devblog.avdi.org/2012/10/01/barewords/">Ruby Tapas: Barewords</a></li>
<li><a href="http://blog.obiefernandez.com/content/2010/04/tr3w-highlights-activesupport-class-class-attribute.html"><code>class_attribute</code>s in Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Favorite Sublime Text Keyboard Shortcuts]]></title>
    <link href="http://callahanchris.github.io/blog/2014/09/23/my-favorite-sublime-text-keyboard-shortcuts/"/>
    <updated>2014-09-23T20:55:44-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/09/23/my-favorite-sublime-text-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>Like many software developers, <a href="http://www.sublimetext.com/">Sublime Text</a> is my preferred text editor. I do almost all of my coding and blogging in Sublime, and as such there are a few convenient keyboard shortcuts I&rsquo;ve picked up along the way. <em>[Note: All keyboard shortcuts are for the OS X version of Sublime Text 2.02, YMMV.]</em></p>

<h3>1. Command + Enter = New Line Below</h3>

<p>Gone are the days of pressing Enter and accidentally cutting a line in half, then having to undo, then having to figure out a way to get the cursor to get to the end of the line before hitting Enter again. This shortcut has saved me a lot of energy &ndash; instead of worrying about where the cursor is on a line when hitting Enter, I only need to make sure that the cursor is on that line. Command + Enter takes care of the rest.</p>

<h3>2. Command + Shift + Enter = New Line Above</h3>

<p>A slight modification of the above, and an insanely useful shortcut. I didn&rsquo;t realize how much I needed this shortcut until I started using it. It&rsquo;s perfect if you write a couple of lines at the top of a file (e.g. a Ruby file)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>then realize you need to do something above the first line (e.g. require another file).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;cat&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zoom up to the top of the page with Command + Up arrow (not a Sublime-specific keyboard shortcut), then hit Command + Shift + Enter, and you&rsquo;re ready to write.</p>

<p>Another great use case of this for writing Ruby code is when you define a method. I will often instinctually write it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fetch</span><span class="p">(</span><span class="n">bone</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then immediately realize I want to write the body of the method. Command + Shift + Enter has saved me many times here.</p>

<h3>3. Command + Shift + d = Duplicate Current Line</h3>

<p>Very straightforward and very useful. Simply duplicates the line you call the command on and places the new line below.</p>

<h3>4. Control + Shift + k = Delete Current Line</h3>

<p>Also straightforward, and a more efficient version of <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">&ldquo;the number one tool for improving code.&rdquo;</a></p>

<h3>5. Command + d = Multiple Select of the Same Word</h3>

<p>Let&rsquo;s say I&rsquo;m refactoring my code and I decide to change the name of a method. I could do a global replacement with Command + Shift + f, but if I want to do a more fine-grained change and have more control over exactly what I&rsquo;m highlighting and editing, I go with Command + d.</p>

<p>What&rsquo;s really cool about this is that Sublime gives you a cursor for each highlighted block of text! That means when you change the highlighted text in what you <em>think</em> should be one place, <em>all</em> of the highlighted texts change. This is the first demo on the Sublime Text website &ndash; check it out if you haven&rsquo;t yet!</p>

<h3>6. Command + Highlight Text = Multiple Select of Different Words</h3>

<p>This one is similar to the Command + d, but is not restricted to highlighting repetitions of the same text. To get this to work, all you have to do is keep pressing the Command key and highlight different regions of text with the trackpad. As with the previous shortcut, this gets really powerful when combined with other keyboard shortcuts, like copy/paste.</p>

<p>In Ruby, you might be setting several attributes of a class to values from a hash. If the keys of the hash happen to be named the same as the keys of the class&rsquo;s attributes, then there is no need to type these out twice! If you start out with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">import_dog_characteristics</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">mood</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">fur_color</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">favorite_toy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>use Command + d to highlight all instances of <code>.</code> in this method, then press the right arrow key so the three cursors are to the left of the attribute&rsquo;s name. Next, use Alt + Shift + right arrow (not a Sublime-specific keyboard shortcut) to highlight the next word (Command + Shift + right arrow also works because the word is at the end of the line here) and copy it using Command + s. Press right arrow again to get to the cursors to the end of each line, type <code>= hash[:</code> (note that Sublime autocloses the bracket!), and hit Command + v to paste in the attributes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">import_dog_characteristics</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">fur_color</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:fur_color</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">favorite_toy</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:favorite_toy</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we could probably do some refactoring here, but that&rsquo;s another blog post!</p>

<h3>7. Command + Shift + p = Set Syntax Highlighting</h3>

<p>This shortcut actually opens up the Command Palette &ndash; a menu that includes a number of things like package controls and preference settings. Enter &ldquo;ss&rdquo; when the search bar pops up to jump down to the various &ldquo;Set Syntax&rdquo; options. The search functionality in Sublime Text is great at matching fuzzy queries, so if you just type &ldquo;ssr&rdquo; then hit Enter, the text in your file will have Ruby&rsquo;s syntax highlighting.</p>

<p>This is awesome if you are just sketching out some ideas in a file that you haven&rsquo;t saved yet (on second thought, you might want to save that file!) or if you&rsquo;re working in a bin or other file that doesn&rsquo;t have an extension.</p>

<h3>8. Command + t = Find File</h3>

<p>Navigation between files can get a bit tricky when in a big project like a Rails app, and it&rsquo;s easy to fall back on using the mouse to click through folders and open new files. Command + t lets you keep your hands on the keys by opening up a search bar to help you find the file you&rsquo;re looking for. As with the previous shortcut, Sublime Text has great fuzzy matching for search queries, so you can find the file you&rsquo;re looking for as easily as possible.</p>

<h3>9. Alt + Drag Mouse = Select Rectangle with Multiple Cursors</h3>

<p>This one is cool, though admittedly I do not use it as often as the above shortcuts. Sometimes you want to get a cursor in the same column on 10 consecutive lines, or you want to select a 3 x 8 rectangle of text. Alt + drag mouse is the right tool for the job here. For this one to work, be sure that no text on the screen is highlighted, then hold Alt down, and finally drag the mouse over the desired text.</p>

<h3>10. Control + Command + Up Arrow = Move Line Up</h3>

<p>Great for quickly moving one or more lines up the page. Just highlight the lines you want to move, or make sure the cursor(s) is/are on the line(s) you want to move. Super convenient.</p>

<h3>11. Control + Command + Down Arrow = Move Line Down</h3>

<p>Same as the last shortcut, but moving in the opposite direction. These two shortcuts have saved me a lot of energy that would have been wasted copying/pasting and using the trackpad to highlight text. Keyboard shortcuts rock!</p>

<h3>12. Command + [ = Indent Line by One Tab</h3>

<p>Having nice, legible code depends to large extent on the formatting of the code. Though Ruby is not a whitespace-sensitive language, many other programming languages are. In any event, proper indentation is critical to writing legible code, and this a good shortcut to achieving this goal.</p>

<h3>13. Command + ] = Unindent Line by One Tab</h3>

<p>Same as above, but going the other way. I&rsquo;ll often use this in combination with Control + Command + down arrow when extracting a method, and these keyboard shortcuts make the process quick and simple!</p>

<h3>14. Command + / = Toggle Line Commented/Uncommented</h3>

<p>This shortcut comes in handy when testing out new ways to write old code. Instead of deleting the old, working code, simply comment it out, try out the new code, and then, if the new code works, use Control + Shift + k to delete the old code.</p>

<h3>Resources</h3>

<ul>
<li><p><a href="http://www.sublimetext.com/">Sublime Text Official Website</a></p></li>
<li><p><a href="https://www.shortcutfoo.com/">Practice Sublime Text Shortcuts</a></p></li>
<li><p>Bonus for Rails developers: <a href="https://github.com/eddorre/SublimeERB">SublimeERB</a>. This plugin makes one of the hardest parts of writing a Rails app (writing ERB tags) a piece of cake.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With RSpec]]></title>
    <link href="http://callahanchris.github.io/blog/2014/09/18/getting-started-with-rspec/"/>
    <updated>2014-09-18T11:56:23-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/09/18/getting-started-with-rspec</id>
    <content type="html"><![CDATA[<p>RSpec is tool to test Ruby code using a very English-like syntax. RSpec is one of the most popular testing frameworks in the Ruby and Rails communities today, along with minitest (the default testing framework used in Rails 4) and Test::Unit.</p>

<p>Testing is essential to writing reliable code. Not only does it establish a rapid feedback loop, but it also gives you the freedom to refactor your code to your heart&rsquo;s content while ensuring that the code retains its original functionality.</p>

<h3>How to Integrate RSpec Into Your App</h3>

<p>It&rsquo;s very easy to get started with RSpec. To download RSpec run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install rspec
</span></code></pre></td></tr></table></div></figure>


<p>In a Ruby app, you can get RSpec up and running with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec --init
</span></code></pre></td></tr></table></div></figure>


<p>This will make a <code>.rspec</code> file in the root directory of the application and a <code>spec/</code> directory containing a <code>spec_helper.rb</code> file.</p>

<p>To get RSpec integrated into a Rails app, add the following code to the <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and run <code>bundle install</code> to install the RSpec gems in the Rails app. Then run the following command to create the <code>.rspec</code> and <code>spec/spec_helper.rb</code> files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate rspec:install
</span></code></pre></td></tr></table></div></figure>


<p>Because Rails autogenerates a test suite through the <code>rails new</code> command, it can also be helpful to tell Rails to not include these files with the <code>-T</code> flag when creating a new app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails new greatest_app_ever -T
</span></code></pre></td></tr></table></div></figure>


<p>Now that RSpec is installed, you can run your specs from the command line with <code>rspec</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rspec
</span><span class='line'>No examples found.
</span><span class='line'>
</span><span class='line'>Finished in 0.00037 seconds <span class="o">(</span>files took 0.11253 seconds to load<span class="o">)</span>
</span><span class='line'>0 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<h3>Structuring a Spec File</h3>

<p>Let&rsquo;s say I want to write a basic Ruby app that will keep track of some different espresso-based beverages. Here&rsquo;s the file directory structure after running <code>rspec --init</code>:</p>

<pre><code>espresso-maker/
|
|__ lib/
|   |
|   |__ espresso.rb
|
|__ spec/
|   |
|   |__ spec_helper.rb
|
|__ .rspec
</code></pre>

<p>So far these files are pretty empty. Here&rsquo;s <code>espresso.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Espresso</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to take a test-first approach to this app, so I&rsquo;ll go ahead and set up a spec file to test the <code>Espresso</code> class. Any file that ends in <code>_spec.rb</code> will be run by the <code>rspec</code> command, but it is best to name the spec files in the <code>model_name_spec.rb</code> format. In the <code>spec</code> directory, I made an <code>espresso_spec.rb</code> file to house all the tests I&rsquo;ll write for the <code>Espresso</code> model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Espresso</span> <span class="k">do</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the top of the <code>espresso_spec.rb</code> file, I required the <code>spec_helper.rb</code> file, where I will list all of the file dependencies so that they don&rsquo;t clutter up this spec file. Then I opened a <code>describe</code> block for the <code>Espresso</code> class - all of the tests in this file should go inside this block. Note that it&rsquo;s OK to use the constant <code>Espresso</code> in this case, but generally you will pass in a string as an argument to the RSpec methods <code>describe</code>, <code>context</code>, and <code>it</code>.</p>

<p>In order for the tests to run properly, I also need to add the following line to the <code>spec/spec_helper.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../lib/espresso&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without this <code>require_relative</code> statement, RSpec will not understand what <code>Espresso</code> is and will throw an uninitialized constant NameError.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Espresso</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#name&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#ingredients&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.country_of_origin&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the <code>describe Espresso</code> block, I opened a <code>describe</code> block for each public method that will be part of <code>Espresso</code>&rsquo;s API. These method-specific <code>describe</code> blocks should use the <code>#method_name</code> notation for instance methods and the <code>.method_name</code> notation for class methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Espresso</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is espresso&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#ingredients&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;one part espresso&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;.country_of_origin&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is from Kenya&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Within each <code>describe</code> block, I can open <code>it</code> blocks that will contain the actual expectations to be tested. <code>it</code> takes a terse (less than 40 characters) description of the specific expectation I&rsquo;m setting on the method for this test as an argument.</p>

<p>Inside of <code>it</code> blocks, the RSpec 3 syntax uses the <code>expect</code> method to set up an expectation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general, you pass an expression to be evaluated to the <code>expect</code> method and chain <code>to</code> to the end of this method. Then you call a matcher method and pass in the value you expect the argument passed to <code>expect</code> to evaluate to. Some of the most common RSpec matcher methods are <code>eq</code>, <code>include</code>, <code>match</code>, and <code>respond_to</code>, all of which closely correspond to Ruby methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="kp">include</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="s2">&quot;Hello world, my name is Chris!&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match</span><span class="p">(</span><span class="sr">/Hello world/</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="s2">&quot;an ordinary string&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:upcase</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Writing the Specs</h3>

<p>Now it&rsquo;s time to write our first test!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Espresso</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;is espresso&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">espresso</span> <span class="o">=</span> <span class="no">Espresso</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">espresso</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;espresso&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re instantiating a new <code>Espresso</code> object and setting up an expectation that the <code>#name</code> method will return the value &ldquo;espresso&rdquo; when it is sent to an instance of the <code>Espresso</code> class. We run <code>rspec</code> and the test fails.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rspec
</span><span class='line'>
</span><span class='line'>Espresso
</span><span class='line'>  <span class="c">#name</span>
</span><span class='line'>    is espresso <span class="o">(</span>FAILED - 1<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> Espresso#name is espresso
</span><span class='line'>     Failure/Error: expect<span class="o">(</span>espresso.name<span class="o">)</span>.to eq<span class="o">(</span><span class="s2">&quot;espresso&quot;</span><span class="o">)</span>
</span><span class='line'>     NoMethodError:
</span><span class='line'>       undefined method <span class="sb">`</span>name<span class="s1">&#39; for #&lt;Espresso:0x00000103131178&gt;</span>
</span><span class='line'><span class="s1">     # ./spec/espresso_spec.rb:7:in `block (3 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.00057 seconds <span class="o">(</span>files took 0.11633 seconds to load<span class="o">)</span>
</span><span class='line'>1 example, 1 failure
</span><span class='line'>
</span><span class='line'>Failed examples:
</span><span class='line'>
</span><span class='line'>rspec ./spec/espresso_spec.rb:5 <span class="c"># Espresso#name is espresso</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the cycle of &ldquo;Red, Green, Refactor&rdquo; can begin. We have a failing (red) test, now let&rsquo;s do the minimum possible work to get the test to pass (green). Once we have green tests, then we can mercilessly refactor while ensuring the tests stay green, and thus the functionality of the code stays the same.</p>

<p>Based on the error message above, I know the first step should be adding a <code>name</code> method to the <code>Espresso</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Espresso</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>rspec</code> again gives a bit more guidance about what the <code>name</code> method should return:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> Espresso#name is espresso
</span><span class='line'>     Failure/Error: expect<span class="o">(</span>espresso.name<span class="o">)</span>.to eq<span class="o">(</span><span class="s2">&quot;espresso&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>       expected: <span class="s2">&quot;espresso&quot;</span>
</span><span class='line'>            got: nil
</span><span class='line'>
</span><span class='line'>       <span class="o">(</span>compared <span class="nv">using</span> <span class="o">==)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s make the test go green!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Espresso</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="s2">&quot;espresso&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rspec
</span><span class='line'>
</span><span class='line'>Espresso
</span><span class='line'>  <span class="c">#name</span>
</span><span class='line'>    is espresso
</span><span class='line'>
</span><span class='line'>Finished in 0.00158 seconds <span class="o">(</span>files took 0.12372 seconds to load<span class="o">)</span>
</span><span class='line'>1 example, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<h3>Introducing <code>context</code>s</h3>

<p>Now I want to have the <code>#name</code> method return different results depending on whether or not the espresso has milk in it. I could just write a new <code>it '...'</code> expectation inside of the <code>describe "#name"</code> block, but this might get unwieldy in short order. Namespacing is important to writing readable, easy-to-follow tests. If there are many facets of a method to be tested, we can group the nested <code>it</code> blocks inside of <code>context</code> blocks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Espresso</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;without milk&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;is espresso&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">espresso</span> <span class="o">=</span> <span class="no">Espresso</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">espresso</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;espresso&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;with milk&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;is macchiato&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">espresso</span> <span class="o">=</span> <span class="no">Espresso</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="n">espresso</span><span class="o">.</span><span class="n">add_milk</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">espresso</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">&quot;macchiato&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I&rsquo;ve written two <code>context</code> blocks, one for an espresso with milk and one for an espresso without milk. In order to get the milk into the espresso, I&rsquo;ve also included an <code>add_milk</code> method &ndash; this should also be tested as part of <code>Espresso</code>&rsquo;s API. Before getting the next test to pass, I fleshed out the <code>Espresso</code> class a bit to support this new method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Espresso</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@milk</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="s2">&quot;espresso&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_milk</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">milk</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:milk</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_milk?</span>
</span><span class='line'>      <span class="n">milk</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The RSpec failure for the second test then read:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> Espresso#name with milk is macchiato
</span><span class='line'>     Failure/Error: expect<span class="o">(</span>espresso.name<span class="o">)</span>.to eq<span class="o">(</span><span class="s2">&quot;macchiato&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>       expected: <span class="s2">&quot;macchiato&quot;</span>
</span><span class='line'>            got: <span class="s2">&quot;espresso&quot;</span>
</span><span class='line'>
</span><span class='line'>       <span class="o">(</span>compared <span class="nv">using</span> <span class="o">==)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to get this test to pass, I implemented the simplest change possible to the <code>name</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>  <span class="n">has_milk?</span> <span class="p">?</span> <span class="s2">&quot;macchiato&quot;</span> <span class="p">:</span> <span class="s2">&quot;espresso&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>then ran <code>rspec</code> and enjoyed the nicely namespaced RSpec output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rspec
</span><span class='line'>
</span><span class='line'>Espresso
</span><span class='line'>  <span class="c">#name</span>
</span><span class='line'>    without milk
</span><span class='line'>      is espresso
</span><span class='line'>    with milk
</span><span class='line'>      is macchiato
</span><span class='line'>
</span><span class='line'>Finished in 0.00147 seconds <span class="o">(</span>files took 0.12149 seconds to load<span class="o">)</span>
</span><span class='line'>2 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>Going forward, I could also add <code>context</code>s for things like &ldquo;without ice&rdquo; and &ldquo;with ice&rdquo;.</p>

<h3>Next Steps</h3>

<p>This is a basic introduction to writing the first few tests of a Ruby app with RSpec, and is far from a complete resource. Already we can see that there is some repetition in the tests above (<code>espresso = Espresso.new</code>) that should be abstracted out. RSpec has a number of convenient methods to help you DRY out your tests, such as <code>let</code>, <code>before</code>, <code>subject</code>, and <code>it_behaves_like</code>. There&rsquo;s also clearly some more refactoring that can be done on the code itself &ndash; but now we have a safety net to fall back on when we start refactoring.</p>

<p>For more comprehensive info about RSpec, check out the resources below!</p>

<h3>Resources</h3>

<ul>
<li><p><a href="https://www.relishapp.com/rspec">Official RSpec Documentation</a></p></li>
<li><p><a href="http://betterspecs.org/">Better Specs</a> - A collection of RSpec best practices</p></li>
<li><p><a href="https://www.codeschool.com/courses/testing-with-rspec">Testing with RSpec on Code School</a> - Still uses the RSpec 2 <code>should</code> syntax, but otherwise a great intro to RSpec.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[China Map Project - Part 4: Introducing Polymorphism]]></title>
    <link href="http://callahanchris.github.io/blog/2014/09/13/china-map-project-part-4-introducing-polymorphism/"/>
    <updated>2014-09-13T17:33:42-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/09/13/china-map-project-part-4-introducing-polymorphism</id>
    <content type="html"><![CDATA[<p><em>This the fourth and final post in a series about my recent side project, <a href="http://amapofchina.herokuapp.com">A Map of China</a>. Check out the <a href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-1-nokogiri/">first post</a>, <a href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-2-bringing-the-map-to-life-with-jvectormap/">second post</a>, <a href="http://callahanchris.github.io/blog/2014/09/12/china-map-project-part-3-refactoring-using-replace-method-with-method-object/">third post</a>, and the <a href="https://github.com/callahanchris/china-map">project repo</a> on Github.</em></p>

<h3>The Road to Polymorphism</h3>

<p>When I started this project, I set out to make an interactive map that displayed a variety of data about the Chinese provinces. But this very premise &ndash; mapping Chinese provinces &ndash; turned out to be far more nuanced and complex than I realized at the outset.</p>

<p>Technically speaking, China has 22 provinces (e.g. Shaanxi, Guangdong), 5 autonomous regions (e.g. Tibet, Inner Mongolia), 4 municipalities (Beijing, Shanghai, Chongqing, and Tianjin), and 2 special administrative regions (SARs) (Hong Kong and Macau). <em>[Note: Any issues pertaining to Taiwan fall outside the scope of this project.]</em></p>

<p>Originally, I had named the main model in my Rails app <code>Province</code>, but later decided that <code>Region</code> would be more suitable. I considered breaking up the <code>Region</code> model into several smaller models (i.e. <code>Province</code>, <code>AutonomousRegion</code>, etc.), but I wanted the data output from the JSON API to all be standardized and accessible from one endpoint, so I kept all regions contained in one model.</p>

<p>The issue of polymorphism came up when I realized that I was using a large number of conditional checks on the region&rsquo;s name in my Wikipedia scraping code. The most prominent among these was the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While I didn&rsquo;t have a <code>SpecialAdministrativeRegion</code> model, this conditional logic more or less amounted to a type check that significantly bogged down the readability and clarity of my code.</p>

<p>Recently I have been reading through <a href="http://martinfowler.com/books/refactoringRubyEd.html"><em>Refactoring: Ruby Edition</em></a>, and found a refactoring that suited my needs in this case: Replace Type Code with Polymorphism.</p>

<h3>Extract Method</h3>

<p>Before I was able to implement the Replace Type Code with Polymorphism refactoring, I needed to continue refactoring the lengthy <code>compute</code> method in the <code>RegionAssembler</code> class from the <a href="http://callahanchris.github.io/blog/2014/09/12/china-map-project-part-3-refactoring-using-replace-method-with-method-object/">last post</a>. Within the <code>compute</code> method, I had been assigning about ten different pieces of data to the <code>Region</code> objects and saving them to the database. In order to preserve the <code>compute</code> API set up in the last post, I had <code>compute</code> delegate to a number of smaller methods, which I removed from <code>compute</code> using Extract Method.</p>

<p>Quoting Martin Fowler:</p>

<blockquote><p>Extract Method is one of the most common refactorings I do. I look at a method that is too long or look at code that needs a comment to understand its purpose. I then turn that fragment of code into its own method.</p>

<p>I prefer short, well-named methods for several reasons. First, it increases the chances that other methods can use a method when the method is finely grained. Second, it allows the higher-level methods to read more like a series of comments. Overriding also is easier when the methods are finely grained.</p>

<p> &ndash; Refactoring: Ruby Edition, page 102</p></blockquote>

<p>Extract Method is an incredibly useful and easy refactoring to undertake. The mechanics are as follows:</p>

<blockquote>
1. Create a new method, and name it after the intention of the method (name it by what it does, not by how it does it).
<br>
2. Copy the extracted code from the source method into the new target method.
</blockquote>


<p>Steps 3-6 deal with handling local variables, which I already extracted out of <code>compute</code> in the Replace Method with Method Object refactoring in the last post.</p>

<blockquote>
7. Replace the extracted code in the source method with a call to the target method.
<br>
8. Test.
<br>
&#8211; Refactoring: Ruby Edition, page 103
</blockquote>


<p>In practice, I looked for chunks of code in the <code>compute</code> method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">compute</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">if</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">gdp_per_capita</span> <span class="o">=</span> <span class="n">gdp_per_cap</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">gdp_per_capita</span> <span class="o">=</span> <span class="n">gdp_per_cap</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>then I copied the code out into its own method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_gdp_per_cap</span>
</span><span class='line'>  <span class="k">if</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">gdp_per_capita</span> <span class="o">=</span> <span class="n">gdp_per_cap</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">gdp_per_capita</span> <span class="o">=</span> <span class="n">gdp_per_cap</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and replaced the original chunk of code with a call to the extracted method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">compute</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">assign_gdp_per_cap</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I methodically went through the <code>compute</code> method and used Extract Method until all logical units of work had been extracted. In the end, the <code>compute</code> method had shrunk from almost 100 lines into this succinct delegator method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">compute</span>
</span><span class='line'>  <span class="n">assign_territorial_designation</span>
</span><span class='line'>  <span class="n">assign_lat_lng</span>
</span><span class='line'>  <span class="n">assign_capital</span>
</span><span class='line'>  <span class="n">assign_area_info</span>
</span><span class='line'>  <span class="n">assign_gdp_usd</span>
</span><span class='line'>  <span class="n">assign_gdp_cny</span>
</span><span class='line'>  <span class="n">assign_gdp_per_cap</span>
</span><span class='line'>  <span class="n">assign_jvector_code</span>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Replace Type Code with Polymorphism</h3>

<p>With the <code>RegionAssembler</code> class now broken down into small methods, it was much easier to see how to implement the Replace Type Code with Polymorphism refactoring. Here are the mechanics for carrying out this refactoring:</p>

<blockquote><ol>
<li><p>Create a class to represent each type code variant.</p></li>
<li><p>Change the class that uses the type code into a module. Include the module into each of the new type classes.</p></li>
<li><p>Change the callers of the original class to create an instance of the desired type instead.</p></li>
<li><p>Test.</p></li>
<li><p>Choose one of the methods that use the type code. Override the method on one of the type classes.</p></li>
<li><p>Test.</p></li>
<li><p>Do the same for the other type classes, removing the method on the module when you&rsquo;re done.</p></li>
<li><p>Test.</p></li>
<li><p>Repeat for the other methods that use the type code.</p></li>
<li><p>Test.</p></li>
<li><p>Remove the module if it no longer houses useful behavior.</p></li>
</ol>


<p> &ndash; Refactoring: Ruby Edition, page 226-227</p></blockquote>

<p>In practice my execution was also a bit similar to the Replace Conditional with Polymorphism refactoring (<em>Refactoring: Ruby Edition</em>, page 279-284).</p>

<p>First I made classes for each regional classification, turned the <code>RegionAssembler</code> class into a module, and included the <code>RegionAssembler</code> module in each class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">RegionAssembler</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ProvinceAssembler</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RegionAssembler</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AutonomousRegionAssembler</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RegionAssembler</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MunicipalityAssembler</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RegionAssembler</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SARAssembler</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RegionAssembler</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next I modified the <code>scrape_all_regions</code> method in the <code>ChinaScraper</code> class to appropriately call each of these new classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">scrape_all_regions</span>
</span><span class='line'>  <span class="no">Region</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">region</span><span class="o">|</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">region</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;Hong Kong&quot;</span><span class="p">,</span> <span class="s2">&quot;Macau&quot;</span>
</span><span class='line'>      <span class="no">SARAssembler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">region</span><span class="p">,</span> <span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;Beijing&quot;</span><span class="p">,</span> <span class="s2">&quot;Chongqing&quot;</span><span class="p">,</span> <span class="s2">&quot;Shanghai&quot;</span><span class="p">,</span> <span class="s2">&quot;Tianjin&quot;</span>
</span><span class='line'>      <span class="no">MunicipalityAssembler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">region</span><span class="p">,</span> <span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;Guangxi&quot;</span><span class="p">,</span> <span class="s2">&quot;Inner Mongolia&quot;</span><span class="p">,</span> <span class="s2">&quot;Ningxia&quot;</span><span class="p">,</span> <span class="s2">&quot;Xinjiang&quot;</span><span class="p">,</span> <span class="s2">&quot;Tibet&quot;</span>
</span><span class='line'>      <span class="no">AutonomousRegionAssembler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">region</span><span class="p">,</span> <span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">ProvinceAssembler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">region</span><span class="p">,</span> <span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, one at a time, I began overriding the methods from the <code>RegionAssembler</code> module in individual classes. I started doing this in the <code>SARAssembler</code> class first because the Hong Kong and Macau Wikipedia pages had the most special cases that led to the overuse of conditionals in the first place.</p>

<p>In practice, here&rsquo;s how the overriding worked. I started with the <code>assign_territorial_designation</code> method (extracted out of the <code>compute</code> method above) in the <code>RegionAssembler</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_territorial_designation</span>
</span><span class='line'>  <span class="k">if</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr td a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/special/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; of &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;span.category a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I copied this method into the <code>SARAssembler</code> class, removed all but one line, and slightly refactored the text selector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_territorial_designation</span>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr td a&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>                                     <span class="n">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/special/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span>
</span><span class='line'>                                     <span class="n">attributes</span><span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">].</span><span class="n">value</span><span class="o">.</span>
</span><span class='line'>                                     <span class="nb">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in the <code>RegionAssembler</code> module, I was able to turn this method into a nice one-liner.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_territorial_designation</span>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;span.category a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span>
</span><span class='line'>                                     <span class="nb">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, it became apparent that this method actually had two responsibilities: assigning the accurate text and making sure it was in title caps. There was a clear opportunity to extract a <code>title_caps</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">title_caps</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could then further simplify the <code>assign_territorial_designation</code> method as such:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_territorial_designation</span>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">title_caps</span><span class="p">(</span><span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;span.category a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This refactoring was particularly helpful for methods that applied to certain classes but not to others. Take for instance the <code>assign_capital</code> method. Municipalities and SARs are cities, and therefore don&rsquo;t have capitals. This method clearly doesn&rsquo;t apply to them. Yet the original <code>assign_capital</code> method spent a significant amount of effort checking whether or not it applied.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_capital</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="sx">%w{ Beijing Chongqing Shanghai Tianjin Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">capital</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedtoprow a&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>SARAssembler</code> and <code>MunicipalityAssembler</code> classes, I overwrote this with an empty method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_capital</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then was able to refactor the <code>assign_capital</code> method in the module into a much simpler version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">assign_capital</span>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">capital</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedtoprow a&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the end, I kept the <code>RegionAssembler</code> module, as there would have been too much code duplication if I copied over all of the methods into each of the four classes. At 80 lines, the <code>RegionAssembler</code> module is not exactly small, but the majority of its methods are one-liners, and the type checking is gone.</p>

<h3>The Final Step (For Now&hellip;)</h3>

<p>Starting from one monolithic <code>ChinaScraper</code> class, I used Replace Method with Method Object to extract out most of the logic from this class into a <code>RegionScraper</code> class. Then I went to town using Extract Method to create a bunch of small methods that followed the Single Responsibility Principle (SRP). Having done this, it was clear that my code could benefit from a Replace Type Code with Polymorphism refactoring.</p>

<p>All told, the shape of my code morphed from its original form &ndash; one 170 line class hinging on a 90 line method &ndash; to a more modular form where code was sectioned off into five classes and two modules, and methods were used for one purpose only.</p>

<p>The final step here was to take all of this code out of the <code>db/seeds.rb</code> file and put it into the <code>app/models</code> directory. This directory&rsquo;s file structure now looks like this:</p>

<pre><code>app/
|
|__ models/
    |
    |__ concerns/
    |   |
    |   |__ j_vectorable.rb
    |   |
    |   |__ region_assembler.rb
    |
    |__ autonomous_region_assembler.rb
    |
    |__ china_scraper.rb
    |
    |__ municipality_assembler.rb
    |
    |__ province_assembler.rb
    |
    |__ region.rb
    |
    |__ sar_assembler.rb
</code></pre>

<p>And the final <code>db/seeds.rb</code> file is now nice and succinct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ChinaScraper</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Room for Improvement</h3>

<p>This was a fun project and I really enjoyed taking the time to refactor my code and make it much more clear, concise, and easy to expand upon going forward.</p>

<p>There are a few areas in which I think I can improve upon in this and future projects:</p>

<ul>
<li><p><strong>Regular Expressions.</strong> I think I got better at writing regular expressions in this project, but it is possible that I would not have needed the polymorphic refactoring if I had used more accurate regular expressions. Regexps are incredibly powerful, and I want to learn a lot more about them.</p></li>
<li><p><strong>Testing.</strong> You may have noticed that I did not follow one very important step of the refactorings from Martin Fowler&rsquo;s book: &ldquo;Test.&rdquo; I am a bit ashamed to admit that I do not have any test coverage on this app. I am not sure whether/how to test the entire Nokogiri and web scraping aspect of the project. This is something I have to look into more for this specific use case, and in general I need to gain more experience doing test-first development.</p></li>
<li><p><strong>Working more with maps.</strong> I am glad that I was able to get the China map up and running, and now I am excited to try working with other third-party libraries to create more interesting data visualizations!</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[China Map Project - Part 3: Refactoring Using Replace Method With Method Object]]></title>
    <link href="http://callahanchris.github.io/blog/2014/09/12/china-map-project-part-3-refactoring-using-replace-method-with-method-object/"/>
    <updated>2014-09-12T15:05:42-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/09/12/china-map-project-part-3-refactoring-using-replace-method-with-method-object</id>
    <content type="html"><![CDATA[<p><em>This post is the third in a series about my recent side project, <a href="http://amapofchina.herokuapp.com">A Map of China</a>. Check out the <a href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-1-nokogiri/">first post</a>, <a href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-2-bringing-the-map-to-life-with-jvectormap/">second post</a>, and the <a href="https://github.com/callahanchris/china-map">project repo</a> on Github.</em></p>

<h3>Refactoring!</h3>

<p>I enjoy refactoring. I&rsquo;ve watched <a href="https://www.youtube.com/watch?v=DC-pQPq0acs">a few</a> <a href="https://www.youtube.com/watch?v=J4dlF0kcThQ">great</a> <a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">technical talks</a> on refactoring and delved further into the topic with two amazing books: <a href="http://www.poodr.com/"><em>Practical Object-Oriented Design in Ruby</em></a> by Sandi Metz and <a href="http://martinfowler.com/books/refactoringRubyEd.html"><em>Refactoring: Ruby Edition</em></a> by Jay Fields, Shane Harvie, and Martin Fowler (with Kent Beck).</p>

<p>One main lesson I&rsquo;ve gleaned from these resources and applying their recommendations to my own code is the importance of having clean, succinct, well-designed code. Code that is easy to read is easy to understand and easy to change when the time comes. I find that pushing my code further towards this goal is both highly challenging and highly rewarding work.</p>

<p>Recently, I have been reading through <em>Refactoring: Ruby Edition</em> and trying to implement some of the refactoring patterns it outlines into my own code. With regards to my China map application, one pattern struck me as particularly useful: Replace Method with Method Object. Quoting Martin Fowler:</p>

<blockquote><p>In this book I emphasize the beauty of small methods. By extracting pieces out of a large method, you make things much more comprehensible.</p>

<p>The difficulty in decomposing a method lies in local variables. If they are rampant, decomposition can be difficult. Using Replace Temp with Query helps to reduce this burden, but occasionally you may find you cannot break down a method that needs breaking. In this case you reach deep into the tool bag and get out your Method Object.</p>

<p> &ndash; Refactoring: Ruby Edition, page 128</p></blockquote>

<p>The mechanics of this refactoring (which was &ldquo;stolen shamelessly from Kent Beck&rsquo;s <em>Smalltalk Best Practice Patterns</em>&rdquo;) are as follows:</p>

<blockquote><ol>
<li><p>Create a new class, name it after the method.</p></li>
<li><p>Give the new class an attribute for the object that hosted the original method (the source object) and an attribute for each temporary variable and each parameter in the method.</p></li>
<li><p>Give the new class a constructor that takes the source object and each parameter.</p></li>
<li><p>Give the new class a method named &ldquo;<code>compute</code>&rdquo;</p></li>
<li><p>Copy the body of the original method into <code>compute</code>. Use the source object instance variable for any invocations of the methods on the original object.</p></li>
<li><p>Test.</p></li>
<li><p>Replace the old method with one that creates the new object and calls <code>compute</code>.</p></li>
</ol>


<p> &ndash; Refactoring: Ruby Edition, page 129</p></blockquote>

<h3>Seeing the Opportunity for Refactoring</h3>

<p>In my original <code>db/seeds.rb</code> file, I had one <code>ChinaScraper</code> class that handled&hellip; everything. Even though this was a simple app, that is still a red flag. Before refactoring, the <code>ChinaScraper</code> class was just shy of 170 lines of code &ndash; another big red flag. Within that class, there was one 94 line method (!!!) &ndash; <code>scrape_all_regions</code> &ndash; doing the bulk of the work. It scraped each region&rsquo;s Wikipedia page, then went through and assigned about ten different attributes to the region, then saved the region and its various attributes to the database.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">scrape_all_regions</span>
</span><span class='line'>  <span class="no">Region</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">region</span><span class="o">|</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr td a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/special/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; of &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;span.category a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ... 80 more lines of code ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can begin to see in this snippet, the <code>scrape_all_regions</code> method contained many conditional statements that essentially checked a region&rsquo;s <code>territorial_designation</code>. This type checking was inevitable given that the HTML/CSS content of the individual region pages varied significantly based on their territorial designations &ndash; more on this in the next post.</p>

<p>It was clear that the <code>scrape_all_regions</code> method had far too many (i.e. more than one) responsibilities and several local variables, so I reached deep into the tool bag for the Replace Method with Method Object refactoring.</p>

<h3>Implementing Replace Method with Method Object</h3>

<p>First, I made a new <code>RegionAssembler</code> class (a slightly more accurate name than the original method) and assigned attributes for all parameters in the <code>scrape_all_regions</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RegionAssembler</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:region</span><span class="p">,</span> <span class="ss">:page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>region</code> ActiveRecord object and <code>page</code> Nokogiri object would have to be passed through to a new instance of the <code>RegionAssembler</code> class upon initialization.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">region</span><span class="p">,</span> <span class="n">page</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@region</span><span class="p">,</span> <span class="vi">@page</span> <span class="o">=</span> <span class="n">region</span><span class="p">,</span> <span class="n">page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The local variables from the original <code>scrape_all_regions</code> method were slightly more complicated, so instead of assigning them to <code>attr_reader</code>s, I used Extract Method for the three local variables in <code>scrape_all_regions</code> and placed the extracted methods in the <code>RegionAssembler</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">area_info</span>
</span><span class='line'>  <span class="vi">@area_info</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/km2/i</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">monetary_info</span>
</span><span class='line'>  <span class="k">if</span> <span class="sx">%w{ Beijing Chongqing }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@monetary_info</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s| /</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="sx">%w{ Shanghai Tianjin }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@monetary_info</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s| |cny|usd|\$/i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="sx">%w{ Guangdong }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@monetary_info</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedtoprow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s| |\$/i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@monetary_info</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/\$/</span><span class="p">)</span> <span class="p">}</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s|\$/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="vi">@monetary_info</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedtoprow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gdp_per_cap</span>
</span><span class='line'>  <span class="k">if</span> <span class="sx">%w{ Guangdong Hubei }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@gdp_per_cap</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s|\$/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="sx">%w{ Shanghai }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@gdp_per_cap</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s|\$|US/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="sx">%w{ Tianjin }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@gdp_per_cap</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s|\)/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@gdp_per_cap</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedbottomrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/\$/</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s|\$|\[/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="vi">@gdp_per_cap</span> <span class="o">||=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow td&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">tr</span><span class="o">|</span> <span class="n">tr</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/cny/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I moved the remainder of the <code>scrape_all_regions</code> method from the <code>ChinaScraper</code> class to the <code>RegionAssembler</code> class and renamed it as <code>compute</code> in the <code>RegionAssembler</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">compute</span>
</span><span class='line'>  <span class="k">if</span> <span class="sx">%w{ Hong\ Kong Macau }</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr td a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/special/i</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; of &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;span.category a&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span> <span class="o">=</span> <span class="n">region</span><span class="o">.</span><span class="n">territorial_designation</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... 50 more lines of code ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">region</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, from inside the <code>ChinaScraper</code> class, I instantiated new <code>RegionAssembler</code> objects and delegated the heavy lifting to them by sending them a simple message: <code>compute</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">scrape_all_regions</span>
</span><span class='line'>  <span class="no">Region</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">region</span><span class="o">|</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>    <span class="no">RegionAssembler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">region</span><span class="p">,</span> <span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome four line method! The <code>ChinaScraper</code> class is now a relatively slim 36 lines of code and adheres much more to the Single Responsibility Principle (SRP) than its previous 170 line incarnation.</p>

<h3>Closing Thoughts</h3>

<p>This initial refactoring made all subsequent refactorings to the <code>db/seeds.rb</code> file significantly easier. It seems like a pretty minimal refactoring at this point, but replacing the <code>scrape_all_regions</code> method with a class was a great first step of breaking the problem up into smaller pieces. This allowed me to think more freely about the problem and began the process of reducing the clutter in my code.</p>

<p>As I alluded to above, the regional classifications of China that led to a glut of conditional statements were also an open door to a polymorphic refactoring, which is the topic of the <a href="http://callahanchris.github.io/blog/2014/09/13/china-map-project-part-4-introducing-polymorphism/">next</a> (and last!) post in this series.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[China Map Project - Part 2: Bringing the Map to Life With jVectorMap]]></title>
    <link href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-2-bringing-the-map-to-life-with-jvectormap/"/>
    <updated>2014-09-11T12:35:18-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-2-bringing-the-map-to-life-with-jvectormap</id>
    <content type="html"><![CDATA[<p><em>This post is the second in a series about my recent side project, <a href="http://amapofchina.herokuapp.com">A Map of China</a>. Check out the <a href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-1-nokogiri/">first post</a> and the <a href="https://github.com/callahanchris/china-map">project repo</a> on Github.</em></p>

<h3>Setting up jVectorMap</h3>

<p>I used the <a href="http://jvectormap.com/">jVectorMap JavaScript library</a> to render a vector map of China on my website. I considered using the Leaflet and/or D3.js JavaScript libraries, but I found it a bit easier to get started with jVectorMap. jVectorMap has maps of a couple dozen countries, a map of the whole world (as seen on their homepage), and even maps of New York City and Chicago, which may be fun to play around with in the future. Importantly for my project, they also have <a href="http://jvectormap.com/maps/countries/china/">a map of mainland China</a>.</p>

<p>To get this map displayed on the index page of my Rails app, I downloaded both the main jVectorMap JS file as well as the China map JS file, put these files into the <code>app/assets/javascripts</code> directory, and included them in the <code>application.js</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//= require jquery-jvectormap-1.2.2.min</span>
</span><span class='line'><span class="c1">//= require jquery-jvectormap-cn-merc-en</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in the <code>index.html.erb</code> file in the <code>app/views/main</code> directory, I added an empty div for the map to be drawn in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;map&quot;</span> <span class="na">class=</span><span class="s">&quot;center-block&quot;</span> <span class="na">style=</span><span class="s">&quot;width: 960px; height: 720px&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here, I was able to draw the map in this div using the jQuery plugin <code>vectorMap()</code>, which was defined in the jVectorMap China map file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#map&#39;</span> <span class="p">).</span><span class="nx">vectorMap</span><span class="p">(</span> <span class="p">{</span><span class="nx">map</span><span class="o">:</span> <span class="s1">&#39;cn_merc_en&#39;</span><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Customizing the Map</h3>

<p>At this point, I was able to display the map exactly as I saw it on the jVectorMap website. The next step was to customize the styling of the map and incorporate the data from the JSON API that I had output from the Rails backend.</p>

<p>The jVectorMap API documentation was relatively easy to navigate and made it clear what I had to do to accomplish this goal. The <code>vectorMap()</code> plugin takes a JavaScript object of options that alter how the map is displayed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">showPopulationDensity</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">popDensity</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#map&#39;</span> <span class="p">).</span><span class="nx">vectorMap</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">map</span><span class="o">:</span> <span class="s1">&#39;cn_merc_en&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;none&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">series</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">regions</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>        <span class="nx">values</span><span class="o">:</span> <span class="nx">popDensity</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">scale</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;#FFF0F0&#39;</span><span class="p">,</span> <span class="s1">&#39;#F5442C&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">max</span><span class="o">:</span> <span class="mi">600</span>
</span><span class='line'>      <span class="p">}]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the <code>showPopulationDensity()</code> function is called, the map is populated with the <code>popDensity</code> dataset that is passed as an argument to the function. By specifying options in the <code>regions</code> parameter, jVectorMap colors in the regions on a gradient (from light to dark) based on their population densities, capping out at the maximum value provided.</p>

<p>The jVectorMap API provides several other helper functions that can be passed to the <code>mapVector()</code> plugin. I used several of these, including <code>onRegionLabelShow</code> to customize the text displayed when you mouse over a region and <code>markers</code>, <code>markerStyle</code>, and <code>onMarkerLabelShow</code> to display data on Hong Kong and Macau, which are not included in the jVectorMap map of China.</p>

<h3><code>$.getJSON()</code> to the Rescue</h3>

<p>In order to pass the data output by my API into a function like <code>showPopulationDensity()</code>, I had to retrieve the JSON on the frontend using AJAX. Because this was a relatively simple case where I was only making a GET request to one URL &ndash; <code>/regions</code>, the lone endpoint of my API &ndash; I used the <code>$.getJSON()</code> jQuery function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span> <span class="s1">&#39;/regions&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside of this function, I iterated over the JSON returned from this API call and stored the data into JavaScript objects according to the region&rsquo;s code specified in the jVectorMap library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">regionNames</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">population</span>    <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">popDensity</span>    <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">gdpUsd</span>        <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">gdpPerCap</span>     <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">areaKmSq</span>      <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">regionNames</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;jvector_code&quot;</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">population</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;jvector_code&quot;</span><span class="p">]]</span>    <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;population&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">popDensity</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;jvector_code&quot;</span><span class="p">]]</span>    <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;population_density&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">gdpUsd</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;jvector_code&quot;</span><span class="p">]]</span>        <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;gdp_usd&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">gdpPerCap</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;jvector_code&quot;</span><span class="p">]]</span>     <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;gdp_per_capita&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">areaKmSq</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;jvector_code&quot;</span><span class="p">]]</span>      <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;area_km_sq&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main focus here was transforming the JSON output from the backend into simple JavaScript objects that could be easily plugged into the jVectorMap helper functions to display different datasets on the map.</p>

<p>Finally, I put a few event listeners on the page so that when a certain bit of text on the page (e.g., &ldquo;Population&rdquo;) is clicked, jVectorMap will display the correct dataset.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#population&#39;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">clearMap</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">showPopulation</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">regionNames</span><span class="p">,</span> <span class="nx">population</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#pop-density&#39;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">clearMap</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">showPopulationDensity</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">regionNames</span><span class="p">,</span> <span class="nx">popDensity</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#gdp-usd&#39;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">clearMap</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">showGdp</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">regionNames</span><span class="p">,</span> <span class="nx">gdpUsd</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#gdp-per-cap&#39;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">clearMap</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">showGdpPerCap</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">regionNames</span><span class="p">,</span> <span class="nx">gdpPerCap</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#area-km-sq&#39;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">clearMap</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">showArea</span><span class="p">(</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">regionNames</span><span class="p">,</span> <span class="nx">areaKmSq</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I was unable to figure out how change the dataset displayed on the map without entirely redrawing the vector graphic. Therefore, I call the <code>clearMap()</code> function, which removes the currently displayed map from the page, and then call the desired function to redraw the appropriate map on the page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">clearMap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span> <span class="s1">&#39;#map&#39;</span> <span class="p">).</span><span class="nx">contents</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Closing Thoughts</h3>

<p>This was my first project using a JavaScript map, and it was really fun! I definitely learned a lot about integrating JavaScript libraries into Rails apps, got more comfortable using AJAX on the frontend, and became more confident in my ability to create and consume JSON APIs.</p>

<p>Check out the next <a href="http://callahanchris.github.io/blog/2014/09/12/china-map-project-part-3-refactoring-using-replace-method-with-method-object/">two</a> <a href="http://callahanchris.github.io/blog/2014/09/13/china-map-project-part-4-introducing-polymorphism/">posts</a> in this series about one of my favorite topics: refactoring!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[China Map Project - Part 1: Nokogiri, Regular Expressions, and a JSON API]]></title>
    <link href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-1-nokogiri/"/>
    <updated>2014-09-11T11:43:03-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-1-nokogiri</id>
    <content type="html"><![CDATA[<p>Over the past couple months I&rsquo;ve been working on a side project to create an <a href="http://amapofchina.herokuapp.com">interactive, data-rich map of China</a>. (<a href="https://github.com/callahanchris/china-map">Check out the source code on Github!</a>) To accomplish this goal, I made a Ruby on Rails app that scrapes Wikipedia for data about all of the regions in China, stores this information in a database, and outputs the data as a JSON API. On the frontend, I used JavaScript to create a vector map of China and populate the map with the data consumed from the API. I saw this project as something that could both challenge me technically and bring together two of my main interests: China and coding.</p>

<h3>Gathering the Data</h3>

<p>I used the Nokogiri gem to do all of the web scraping in this project. Starting on the <a href="http://en.wikipedia.org/wiki/China">main China page on Wikipedia</a>, I was able to scrape the links to the individual pages for every province, autonomous region, municipality, and special administrative region in China. On each page I was able to take in some basic data about the region, including its population, population density, and GPD per capita.</p>

<p>Nokogiri and OpenURI make the process of web scraping very simple. In my <code>Gemfile</code>, I required the Nokogiri gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in the file I did the scraping in (<code>db/seeds.rb</code>), I required the OpenURI module of the Ruby standard library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>(As a side note, I have been unable to find out if there is a better, more centralized place to put the OpenURI requirement in a Rails application. It is a module in Ruby&rsquo;s standard library, so it can&rsquo;t be placed in the <code>Gemfile</code>, but it still seems somewhat un-Railslike to just throw the requirement into whatever file you happen to be using it in.)</em></p>

<p>Once these requirements were declared, it was straighforward to use OpenURI <code>open</code> the URL I was targeting and use Nokogiri to capture the HTML contents of the page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">china_main_page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://en.wikipedia.org/wiki/China&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In the case of my app, I first scraped the contents of the China page on Wikipedia and stored the links to each region listed on that page into an array named <code>region_links</code>. I then iterated over these links (skipping one as there were two links to Taiwan) to create new <code>Region</code> objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_regions</span>
</span><span class='line'>  <span class="n">region_links</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">next</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">22</span>
</span><span class='line'>    <span class="n">region</span> <span class="o">=</span> <span class="no">Region</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">region</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scenes in <code>app/models/region.rb</code>, I used the last part of the URL to assign names to each region using the <code>before_create</code> hook.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Region</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:assign_name_from_url</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_name_from_url</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">url</span><span class="o">[</span><span class="mi">29</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="s1">&#39; Autonomous Region&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="s1">&#39; Autonomous Region&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once I had all of the regions and their Wikipedia URLs stored in the database, the next step was to iterate over the regions and use Nokogiri to scrape the HTML contents of each region&rsquo;s page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">scrape_all_regions</span>
</span><span class='line'>  <span class="no">Region</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">region</span><span class="o">|</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">region</span><span class="o">.</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wanted to use best practices and make the code adhere to object-oriented design principles, so I put the above methods into a class called <code>ChinaScraper</code>, the outline of which roughly looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ChinaScraper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">scrape_index</span>
</span><span class='line'>    <span class="n">make_regions</span>
</span><span class='line'>    <span class="n">scrape_all_regions</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scrape_index</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">make_regions</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scrape_all_regions</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, in <code>db/seeds.rb</code> I seeded the database simply by instantiating a new <code>ChinaScraper</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ChinaScraper</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Parsing the Data</h3>

<p>If you look at the Wikipedia articles of a few Chinese provinces, you will notice that the structure of each article is fairly similar. Each page has a sidebar on the right with some basic data regarding the specific region: its capital, governor, latitude and longitude, GDP in US dollars and Chinese yuan, etc. These data are all seemingly laid out in the same format, but actually the CSS selectors are slightly different in different articles.</p>

<p>At first, I constructed a large conditional statement that chose the accurate CSS selector to use given some hardcoded information to identify the region. Eventually this hardcoding didn&rsquo;t sit right with me, so I found a more elegant solution: regular expressions.</p>

<p>One good example of this was with the data on the page indicating a region&rsquo;s area and population density. Given the <code>page</code> of a particular <code>region</code>, I isolated all <code>tr</code> HTML elements with the CSS <code>mergedrow</code> class that contained the text <code>km2</code> and stored this into a local variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">area_info</span> <span class="o">=</span> <span class="n">page</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;tr.mergedrow&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/km2/i</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then <code>split</code> the appropriate string from the <code>area_info</code> array into an array of strings using a regular expression, selected the string with the relevant info, removed all commas from the string, and converted it to an integer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">region</span><span class="o">.</span><span class="n">area_km_sq</span>         <span class="o">=</span> <span class="n">area_info</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">text</span><span class="o">.</span>
</span><span class='line'>                              <span class="nb">split</span><span class="p">(</span><span class="sr">/\s| /</span><span class="p">)</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span>
</span><span class='line'>                              <span class="nb">gsub</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">region</span><span class="o">.</span><span class="n">population_density</span> <span class="o">=</span> <span class="n">area_info</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">text</span><span class="o">.</span>
</span><span class='line'>                              <span class="nb">split</span><span class="p">(</span><span class="sr">/\s| |\//</span><span class="p">)</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span>
</span><span class='line'>                              <span class="nb">gsub</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span></code></pre></td></tr></table></div></figure>


<p>I originally used only <code>\s</code> to split the string on all of its whitespaces, but found that a few whitespaces were still showing up in the resulting array of strings! After some digging, I figured out that whitespaces from the Chinese character set were included in the text of some of the Wikipedia articles, but they were not picked up by the regexp&rsquo;s whitespace identifier.</p>

<p>I was able to solve this problem by adding the Chinese whitespace as one of the options in the above regexp. However, when I tested this program on a different computer that did not have a Chinese language package installed, <code>rake db:seed</code> blew up on this line. After some more digging, I was able to resolve this problem by adding one commented line to the top of the <code>db/seeds.rb</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: UTF-8</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Outputting the Data as a JSON API</h3>

<p>Once the data had been scraped from Wikipedia, parsed using Nokogiri and regular expressions, and persisted in the database, it was then just a matter of outputting the data as a JSON API for easy consumption by the JavaScript frontend. The <code>app/controllers/regions_controller.rb</code> file is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RegionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@regions</span> <span class="o">=</span> <span class="no">Region</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@regions</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Closing Thoughts</h3>

<p>Though this was not my first web scraping project, it was challenging given the HTML/CSS inconsistencies across different Wikipedia articles. After solving the problem in a brute force fashion using hardcoded region data, I was able to bring the code to a more abstract level and learn a lot about parsing text with regular expressions in the process.</p>

<p>Check out the <a href="http://callahanchris.github.io/blog/2014/09/11/china-map-project-part-2-bringing-the-map-to-life-with-jvectormap/">next post</a> in this series where I talk about the JavaScript frontend and the <a href="http://callahanchris.github.io/blog/2014/09/12/china-map-project-part-3-refactoring-using-replace-method-with-method-object/">third</a> and <a href="http://callahanchris.github.io/blog/2014/09/13/china-map-project-part-4-introducing-polymorphism/">fourth</a> posts where I talk about refactoring the <code>db/seeds.rb</code> file!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write an Immediately-Invoked Anonymous Function Expression in JavaScript]]></title>
    <link href="http://callahanchris.github.io/blog/2014/07/24/how-to-write-an-immediately-invoked-anonymous-function-expression-in-javascript/"/>
    <updated>2014-07-24T10:43:07-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/07/24/how-to-write-an-immediately-invoked-anonymous-function-expression-in-javascript</id>
    <content type="html"><![CDATA[<p>Anonymous functions sound mysterious and a bit dangerous, but in fact they are just functions that have not been given a name. In JavaScript, a named function looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Hello!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>and an anonymous function looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Hi, my name is REDACTED&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SyntaxError: function statement requires a name</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you just write an anonymous function out of context like this, you will get a <code>SyntaxError</code>, presumably because the JavaScript interpreter has no clue why you defined a function that you can never use because you have no name with which to call it.</p>

<h3>Calling a Function in JavaScript</h3>

<p>To call, or invoke, a function in JavaScript, append parentheses and a semicolon (<code>();</code>) to the end of the function, passing arguments into the parentheses when necessary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// without args</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Hello world!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sayHello</span><span class="p">();</span>   <span class="c1">// &quot;Hello world!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// with args</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span> <span class="nx">name</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Hi &quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">greet</span><span class="p">(</span> <span class="s2">&quot;Chris&quot;</span> <span class="p">);</span>   <span class="c1">// &quot;Hi Chris!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript provides three good opportunities for storing a function so that you can call it in the future. One is by naming the function as with the <code>sayHello</code> and <code>greet</code> functions above.</p>

<p>To store an anonymous function, you can either assign the function to a variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Hi, my name is REDACTED&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sayHello</span><span class="p">();</span>   <span class="c1">// &quot;Hi, my name is REDACTED&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or you can assign the function to a method on the prototype of an object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Song</span><span class="p">(</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">artist</span><span class="p">,</span> <span class="nx">instrument</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">artist</span> <span class="o">=</span> <span class="nx">artist</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">instrument</span> <span class="o">=</span> <span class="nx">instrument</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Song</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">artist</span> <span class="o">+</span> <span class="s2">&quot;: &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot; for &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">instrument</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">suiteOne</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Song</span><span class="p">(</span> <span class="s2">&quot;Suite #1 in G Major&quot;</span><span class="p">,</span> <span class="s2">&quot;Johann Sebastian Bach&quot;</span><span class="p">,</span> <span class="s2">&quot;Cello&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">suiteOne</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>    <span class="c1">// &quot;Johann Sebastian Bach: Suite #1 in G Major for Cello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enter the IIFE</h3>

<p>There is a way for an anonymous function to have its cake and eat it too. An immediately-invoked function expression, or IIFE (pronounced &ldquo;iffy&rdquo;), is a function that is called as soon as it is define. An IIFE can be named, but does not need to be.</p>

<p>Due to a quirk in JavaScript, it is not possible to immediately invoke a function <em>declaration</em>. However, a function <em>expression</em> can be immediately invoked. This seems like an arbitrary distinction, but all it practically means is that JavaScript won&rsquo;t allow you to immediately call a statement that begins with the word <code>function</code>. If that same statement is surrounded in parentheses, however, an IIFE is born and the function can be immediately called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// function declaration</span>
</span><span class='line'><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;They&#39;ll never find me.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SyntaxError: function statement requires a name</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// function expression</span>
</span><span class='line'><span class="c1">// preferred syntax, calling parens on the inside</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;Nice try.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;Nice try.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// also a commonly used syntax for function expressions</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;That&#39;s classified.&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;That&#39;s classified.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The IIFE has become a popular pattern in the JavaScript community in recent years. It can be used to create a document ready condition, which ensures that a web page&rsquo;s JavaScript does not execute until the page&rsquo;s HTML has fully loaded. Here is an example of an anonymous IIFE used when creating a ready doc with jQuery:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">jQuery</span><span class="p">(</span> <span class="nb">document</span> <span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// great JavaScript code</span>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<p>jQuery also provides an additional dose of syntactic sugar by allowing you to express the above code in either of the following ways:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// explicit calling parens</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// great JavaScript code</span>
</span><span class='line'><span class="p">}());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// calling parens omitted</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// great JavaScript code</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>I have only been learning JavaScript for two weeks or so, but I feel a lot more comfortable about using anonymous functions after researching this blog post and playing around with JavaScript some more. Going forward I hope to explore anonymous functions more in Ruby through <code>Proc</code>s, blocks, and <code>lambda</code>s.</p>

<ul>
<li><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">Ben Alman - The blog post that coined the term IIFE</a></li>
<li><a href="https://github.com/airbnb/javascript">Airbnb JavaScript Style Guide</a></li>
<li><a href="http://youtu.be/taaEzHI9xyY?t=33m36s">Crockford on Parens in IIFEs</a></li>
<li><a href="http://learn.jquery.com/using-jquery-core/document-ready/">jQuery Documentation on <code>$( document ).ready()</code></a></li>
<li><a href="http://stackoverflow.com/a/3247044/3437335">Assigning Functions to Variables in JavaScript</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five Useful Ruby Array Methods]]></title>
    <link href="http://callahanchris.github.io/blog/2014/07/17/five-useful-ruby-array-methods/"/>
    <updated>2014-07-17T13:25:34-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/07/17/five-useful-ruby-array-methods</id>
    <content type="html"><![CDATA[<p>Arrays are a versatile and reliable data structure. The <code>Array</code> class in Ruby comes equipped with a number of extremely useful instance methods, including <code>pop</code>, <code>push</code>, <code>shift</code>, <code>unshift</code>, <code>length</code>, <code>reverse</code>, etc. With the <code>Enumerable</code> module mixin, Ruby arrays have access to even more iterators and other fun methods.</p>

<p>Here are five great instance methods built in to Ruby&rsquo;s <code>Array</code> class that I&rsquo;ve come across recently.</p>

<h3><code>Array#transpose</code></h3>

<p>This is probably the fanciest method on this list. It is used to &ldquo;reflect&rdquo; an array across a diagonal axis. Wikipedia has a good explanation of <a href="http://en.wikipedia.org/wiki/Transpose">matrix transposition</a>, including this handy gif:</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e4/Matrix_transpose.gif" alt="transpose" /></p>

<p>Here is how the <code>transpose</code> method looks in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>          <span class="o">[</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span>  <span class="s2">&quot;b&quot;</span><span class="p">,</span>  <span class="s2">&quot;c&quot;</span><span class="p">,</span>  <span class="s2">&quot;d&quot;</span><span class="p">,</span>   <span class="s2">&quot;e&quot;</span>  <span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span>  <span class="mi">1</span><span class="p">,</span>    <span class="mi">2</span><span class="p">,</span>    <span class="mi">3</span><span class="p">,</span>    <span class="mi">4</span><span class="p">,</span>     <span class="mi">5</span>   <span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;cat&quot;</span><span class="p">,</span><span class="s2">&quot;dog&quot;</span><span class="p">,</span><span class="s2">&quot;cow&quot;</span><span class="p">,</span><span class="s2">&quot;pig&quot;</span><span class="p">,</span><span class="s2">&quot;horse&quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">transpose</span>
</span><span class='line'><span class="c1">#    =&gt; [</span>
</span><span class='line'><span class="c1">#         [&quot;a&quot;, 1,  &quot;cat&quot; ],</span>
</span><span class='line'><span class="c1">#         [&quot;b&quot;, 2,  &quot;dog&quot; ],</span>
</span><span class='line'><span class="c1">#         [&quot;c&quot;, 3,  &quot;cow&quot; ],</span>
</span><span class='line'><span class="c1">#         [&quot;d&quot;, 4,  &quot;pig&quot; ], </span>
</span><span class='line'><span class="c1">#         [&quot;e&quot;, 5, &quot;horse&quot;]</span>
</span><span class='line'><span class="c1">#       ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>transpose</code> can only be used when you have an array of arrays where all of the nested arrays are the same length.</p>

<p>I got some use out of the <code>transpose</code> method when trying to rotate an array of arrays (a tic tac toe board) 90 degrees to the right. I first called <code>transpose</code> on the array and then chained on <code>map(&amp;:reverse)</code> to individually reverse each of the nested arrays.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">board</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot;O&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="o">[</span><span class="s2">&quot;O&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="o">]</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">rotated_board</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="n">transpose</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:reverse</span><span class="p">)</span>
</span><span class='line'><span class="c1">#    =&gt; [</span>
</span><span class='line'><span class="c1">#         [&quot;O&quot;, &quot;X&quot;, &quot;O&quot;],</span>
</span><span class='line'><span class="c1">#         [&quot;X&quot;, &quot;X&quot;, &quot; &quot;],</span>
</span><span class='line'><span class="c1">#         [&quot; &quot;, &quot;O&quot;, &quot;X&quot;]</span>
</span><span class='line'><span class="c1">#       ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>With access to both a <code>board</code> and a <code>rotated_board</code>, I was able to easily reuse methods in my tic tac toe game.</p>

<h3><code>Array#fill</code></h3>

<p><code>fill</code> does just what it says: it fills every element in an array with the argument passed to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ a b c }</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;Hello world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;Hello world!&quot;, &quot;Hello world!&quot;, &quot;Hello world!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also pass a starting index and a length as arguments to <code>fill</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ an array full of words and things }</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="s2">&quot;surprises&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;an&quot;, &quot;array&quot;, &quot;full&quot;, &quot;of&quot;, &quot;surprises&quot;, &quot;surprises&quot;, &quot;surprises&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even pass a block to <code>fill</code>, which yields the array&rsquo;s index as the block argument. Ruby is awesome!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ hello world my name is chris }</span><span class="o">.</span><span class="n">fill</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [0, 1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Warning: <code>fill</code> is a destructive method. Once an array is <code>fill</code>ed, the old data is permanently gone.</p>

<h3><code>Array#permutation</code></h3>

<p>This method returns all permutations of the array it is sent to. If no block is used, then by default Ruby returns an <code>Enumerator</code> object, so it is useful to chain the <code>to_a</code> method on the end in order to return an array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">permutation</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;Enumerator: [1, 2, 3]:permutation&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">permutation</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="c1"># =&gt; [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method sounds a bit esoteric, but I have used it in practice when trying to find all possible anagrams of a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">all_permutations</span> <span class="o">=</span> <span class="s2">&quot;listen&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">permutation</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">letters</span><span class="o">|</span> <span class="n">letters</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;listen&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;listne&quot;,</span>
</span><span class='line'><span class="c1">#     &quot;lisetn&quot;,</span>
</span><span class='line'><span class="c1">#     ... 716 more permutations! ...</span>
</span><span class='line'><span class="c1">#     &quot;netsil&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">all_permutations</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;silent&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">all_permutations</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;lentils&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Array#sample</code></h3>

<p><code>sample</code> is a convenient way to randomly select one or more elements from an array. If you do not pass an argument to <code>sample</code>, it will return one object from the array. If you pass a number as an argument to <code>sample</code>, it will return an array including the number of elements specified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w{ cat dog pig pigeon dolphin walrus }</span><span class="o">.</span><span class="n">sample</span>
</span><span class='line'><span class="c1"># =&gt; &quot;pigeon&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{ cat dog pig pigeon dolphin walrus }</span><span class="o">.</span><span class="n">sample</span>
</span><span class='line'><span class="c1"># =&gt; &quot;dolphin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w{ cat dog pig pigeon dolphin walrus }</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [&quot;cat&quot;, &quot;pigeon&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Array#flatten</code></h3>

<p>This is probably the method I use the most on this list. When doing nested iteration in Ruby, you often end up with an array of arrays. If you want to compare each element in the larger array, you will be confounded by the fact that Ruby tries to compare the nested arrays with each other, rather than the values within these arrays.</p>

<p>To get around this problem, the <code>flatten</code> method turns a nested array into an array one level deep.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="o">]]</span><span class="p">,</span> <span class="o">[[[</span><span class="mi">5</span><span class="o">]]]].</span><span class="n">flatten</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method is not destructive (though it does have a destructive counterpart in <code>flatten!</code>), so it is mainly useful if you want to perform a specific operation on a flattened array. For example, if you wind up with a nested array after performing multiple <code>collects</code> and then want to perform an operation on the array, <code>flatten</code> can come in handy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dogs</span> <span class="o">=</span> <span class="o">[[</span><span class="c1">#&lt;Dog:0x00000101d52a30 @name=&quot;Fido&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x00000101d01f90 @name=&quot;Fredo&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x00000101ae2098 @name=&quot;Freida&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x00000106187548 @name=&quot;Francis&quot;&gt;,</span>
</span><span class='line'>         <span class="c1">#&lt;Dog:0x0000010615d630 @name=&quot;Bailey&quot;&gt;]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">dogs</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `name&#39; for #&lt;Array:0x00000101ee5b18&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dogs</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [#&lt;Dog:0x0000010615d630 @name=&quot;Bailey&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000101d52a30 @name=&quot;Fido&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000106187548 @name=&quot;Francis&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000101d01f90 @name=&quot;Fredo&quot;&gt;,</span>
</span><span class='line'><span class="c1">#     #&lt;Dog:0x00000101ae2098 @name=&quot;Freida&quot;&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>flatten</code> also takes an argument to specify how many levels to flatten the nested array by.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[[[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="mi">2</span><span class="o">]].</span><span class="n">flatten</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [[1], 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m not sure how useful passing in an argument is, as I have only used <code>flatten</code> without an argument in practice.</p>

<h3>Closing Thoughts</h3>

<p>Arrays are an interesting Ruby class with a surprising amount of useful builtin methods. Read the Ruby documentation for more info and more unique methods to play around with.</p>

<ul>
<li><a href="http://www.ruby-doc.org/core-2.1.2/Array.html">Ruby Doc - Array</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons From Refactoring Tic Tac Toe]]></title>
    <link href="http://callahanchris.github.io/blog/2014/07/10/lessons-from-refactoring-tic-tac-toe/"/>
    <updated>2014-07-10T18:02:50-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/07/10/lessons-from-refactoring-tic-tac-toe</id>
    <content type="html"><![CDATA[<p><em><a href="https://github.com/callahanchris/tic-tac-toe">Check out my tic tac toe code on github!</a></em></p>

<p>As part of my application to the Flatiron School in January of this year, I had to write a tic tac toe computer program. The assignment was purposely left vague; it was up to me to decide what programming language to use, how complex it was, whether it was one-player or two-player, etc.</p>

<p>After four or five days of unchecked obsession (fueled in part by my fiancee&rsquo;s invaluable bug-spotting abilities), I emerged with 438 lines of Ruby code and a working one-player version of tic tac toe that could be played on the command line. It was ugly, but it worked.</p>

<p>Six months later, as I near the halfway point in the web development course at the Flatiron School, I decided to apply my new programming knowledge by refactoring the code of my old tic tac toe game.</p>

<p>In the end, I threw out about 95% of my original code. It was painful to do this, but through the pain, I learned some valuable lessons.</p>

<h3>Make Smaller Methods</h3>

<p>Small methods are the bedrock of semantic, abstract, and reusable code. Until reading <a href="http://www.poodr.com/">POODR</a> and listening to <a href="https://twitter.com/aviflombaum">Avi Flombaum&rsquo;s</a> lectures, I had no clue about the value of the single responsibility principle. When applied to methods, the single responsibility principle means making methods that accomplish only one purpose. A good litmus test is to ask: &ldquo;What does this method do?&rdquo; If there are any &ldquo;and&#8221;s or &#8220;or&#8221;s in the response, the method might be shouldering multiple responsibilities.</p>

<p>Aside of making your code more readable and consise, breaking methods down to smaller and smaller units has an additional (and unexpected) benefit: the emergence of seredipitous recombinations. After breaking down methods into atomic units, you often find that you are able to reuse these methods in contexts outside of that in which you originally designed the method.</p>

<p>It was awesome being able to apply these ideas to my tic tac toe game. I feel much more confident using smaller methods now.</p>

<p>Here is an example from my original tic tac toe game of the <code>empty_spaces</code> method that determines how many empty spaces are left on the board. [<em>Warning: I really did not know how to code when I wrote this program. Just be thankful I&rsquo;m not pasting in the 160(!) line method I had in the original program.</em>]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty_spaces</span>
</span><span class='line'>  <span class="c1"># Check to see how many empty spaces are left on the board</span>
</span><span class='line'>  <span class="vi">@empty_spaces</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Convert the @tttboard variable array a standard array for quick check</span>
</span><span class='line'>  <span class="n">ttt</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ttt</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>      <span class="vi">@empty_spaces</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@empty_spaces</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here is the refactored version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">empty_spaces</span>
</span><span class='line'>  <span class="n">board</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One line methods are awesome! The new implementation of <code>empty_spaces</code> is significantly more readable and easier to understand than the original one. It utilizes the reader method provided by <code>attr_reader :board</code> rather than directly accessing the data <code>@board</code> instance variable, making the code more open to easy changes going forward.</p>

<p>After DRYing up my methods, I had to take on a larger design issue: classes.</p>

<h3>Make Smaller Classes</h3>

<blockquote><p>&ldquo;Applications that are easy to change consist of classes that are easy to reuse. Reusable classes are pluggable units of well-defined behavior that have few entanglements. An application that is easy to change is like a box of building blocks; you can select just the pieces you need and assemble them in unanticipated ways.&rdquo;</p></blockquote>

<p><em>&ndash; Practical Object-Oriented Design in Ruby, page 21</em></p>

<p>I didn&rsquo;t understand the purpose of classes back in January when I first wrote my tic tac toe implementation. This partially explains why I originally only included one class (<code>TicTacToe</code>) that stood at a monstrous 405 lines &ndash; a veritable God object towering over my codebase.</p>

<p>I am still far from mastering the principles of object-oriented design, but I have come a long way over the last few months, thanks largely to <em>POODR</em> and <em>The Well-Grounded Rubyist</em>. One of the most important things I&rsquo;ve learned along the way is to not be afraid of classes. Watching tech talks by Sandi Metz, Ben Orenstein, and others showed me that the single responsibility principle also applies to classes.</p>

<p>My new tic tac toe codebase has 9 classes, all of which sit inside of the <code>TTT</code> module. The stubbed out class hierarchy in my program now vaguely looks like this:</p>

<pre><code>module TTT            #=&gt; namespace and home to the constant BOARD
|
--class Game          #=&gt; initializes new Human and Computer objects
|
--class CLIRunner     #=&gt; responsible for running the game via CLI
|
--class CheckWinner   #=&gt; checks if the game has been won
|
--class Human         #=&gt; defines the ground rules for human moves
|
--class Computer      #=&gt; delegates the computer's AI logic to subclasses
  |
  --class Opener      #=&gt; makes opening moves for the computer
  |
  --class Winner      #=&gt; makes winning moves for the computer
  | |
  | --class Blocker   #=&gt; piggybacks off of the Winner class's logic to
  |                   #=&gt; block potential wins by the human player
  |
  --class RandomMover #=&gt; moves randomly if the above strategies fail
</code></pre>

<p>It is abundantly clear now what each class does. Here is the computer&rsquo;s original logic for blocking a human from winning, which was imbedded inside of the 160 line <code>computer</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The computer blocks the human player if it does not have a winning move</span>
</span><span class='line'><span class="c1"># Computer blocks against human&#39;s diagonal wins</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Computer blocks against human&#39;s horizontal wins</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># ...10 more lines of code...</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Computer blocks against human&#39;s vertical wins</span>
</span><span class='line'><span class="k">elsif</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@player</span><span class="si">}</span><span class="s2">&quot;</span> <span class="o">&amp;&amp;</span> <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>  <span class="vi">@tttboard</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@opponent</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># ...10 more lines of code...</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the new implementation of the <code>Blocker</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Blocker</span> <span class="o">&lt;</span> <span class="ss">TTT</span><span class="p">:</span><span class="ss">:Computer</span><span class="o">::</span><span class="no">Winner</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">potential_wins</span>
</span><span class='line'>    <span class="o">[</span><span class="n">opponent</span><span class="p">,</span> <span class="n">opponent</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">].</span><span class="n">permutation</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">can_block?</span>
</span><span class='line'>    <span class="n">can_win?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While the original version hard coded the lookup process on the board and manually altered the data of each square in the <code>@tttboard</code> array, the <code>Blocker</code> class by contrast seems almost empty. <code>Blocker</code> inherits from the <code>Winner</code> class, which implements the logic of finding <code>potential_wins</code> and filling in the <code>piece</code> (&ldquo;X&rdquo; or &ldquo;O&rdquo;) of the computer in the empty space. The <code>Winner</code> class has methods like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">can_win_horiz?</span>
</span><span class='line'>  <span class="n">potential_wins</span><span class="o">.</span><span class="n">any?</span> <span class="k">do</span> <span class="o">|</span><span class="n">pot_win</span><span class="o">|</span>
</span><span class='line'>    <span class="n">board</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">pot_win</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>which determines if there are any potential wins for the computer horizontally. Another method <code>horiz_win</code> in the <code>Winner</code> class then uses the <code>update_board</code> method inherited from the <code>Computer</code> class to fill in the tic tac toe board with the computer&rsquo;s move.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update_board</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">TTT</span><span class="p">:</span><span class="ss">:BOARD</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">piece</span> <span class="k">if</span> <span class="ss">TTT</span><span class="p">:</span><span class="ss">:BOARD</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Blocker</code> class has access to all of the methods of the <code>Winner</code> class. <code>Blocker</code> is essentially solving the same puzzle as <code>Winner</code>, but instead of solving for <em>computer</em> wins, it is solving for <em>human</em> wins. Therefore, all I really needed to change was the <code>potential_wins</code> method, plugging in <code>opponent</code> (indicating the human&rsquo;s &ldquo;X&rdquo; or &ldquo;O&rdquo; piece). This overwrote <code>Winner</code>&rsquo;s implementation of this method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">potential_wins</span>
</span><span class='line'>  <span class="o">[</span><span class="n">piece</span><span class="p">,</span> <span class="n">piece</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">].</span><span class="n">permutation</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Make Reusable Code</h3>

<p>This is the overarching lesson I learned in the process of refactoring my tic tac toe code. Writing the original tic tac toe implementation was painful &ndash; not only because I didn&rsquo;t really understand how to code at the time, but also because the code I wrote was extremely resistant to change. My new implementation of tic tac toe, on the other hand, relies more on abstractions and is significantly more open to the possibility of change in the future.</p>

<p>Take, for example, the <code>Computer</code> class&rsquo;s <code>move</code> algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">move</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">empty_spaces</span> <span class="o">&gt;</span> <span class="mi">7</span>
</span><span class='line'>    <span class="n">opener</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">winner</span><span class="o">.</span><span class="n">can_win?</span>
</span><span class='line'>    <span class="n">winner</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">blocker</span><span class="o">.</span><span class="n">can_block?</span>
</span><span class='line'>    <span class="n">blocker</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">random_mover</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what if I want to make the computer smarter and decide to implement a way for the computer to recognize opportunities to create a fork? In my original implementation, the cost of adding such a feature was simply too high. Not only would I be afraid of breaking my existing code, but I&rsquo;d also have to hardcode every single permutation possible &ndash; something I now know is avoidable.</p>

<p>Instead, with the new code, I could make a <code>Forker</code> class that inherits from <code>Computer</code>. The most significant change I&rsquo;d have to make to <code>Computer</code> to accomplish this would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">move</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">empty_spaces</span> <span class="o">&gt;</span> <span class="mi">7</span>
</span><span class='line'>    <span class="n">opener</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">winner</span><span class="o">.</span><span class="n">can_win?</span>
</span><span class='line'>    <span class="n">winner</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">blocker</span><span class="o">.</span><span class="n">can_block?</span>
</span><span class='line'>    <span class="n">blocker</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">forker</span><span class="o">.</span><span class="n">can_fork?</span>
</span><span class='line'>    <span class="n">forker</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">random_mover</span><span class="o">.</span><span class="n">move</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By extension, making a <code>ForkBlocker</code> class would be equally easy to accomplish.</p>

<p>There are many other ways that my tic tac toe codebase can be easily expanded upon now. I could make the game a 4x4 or 5x5 grid instead of a 3x3 grid with ease. I don&rsquo;t even want to think about how many hours and keystrokes it would take to accomplish in the original implementation.</p>

<h3>Going Forward</h3>

<p>Another direction I want to take this project in is bringing tic tac toe to the Internet! I have a basic grasp of the Sinatra and Ruby on Rails web application frameworks, and now that I have tic tac toe running on the command line, the next logical step is figuring out how to deploy it on the web. This could bring about some new and interesting challenges like how to integrate JavaScript and jQuery into the app. I know very little about these technologies but am excited to learn more!</p>

<h3>Links/Resources</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">Sandi Metz - All the Little Things (RailsConf 2014)</a></li>
<li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby (POODR)</a></li>
<li><a href="http://www.manning.com/black3/">The Well-Grounded Rubyist</a></li>
<li><a href="http://rubyrogues.com/087-rr-book-clubpractical-object-oriented-design-in-ruby-with-sandi-metz/">Sandi Metz on the Ruby Rogues podcast</a></li>
<li><a href="https://www.youtube.com/watch?v=DC-pQPq0acs">Ben Orenstein - Refactoring from Good to Great (Aloha Ruby Conf 2012)</a></li>
<li><a href="https://www.youtube.com/watch?v=9LfmrkyP81M">David Heinemeier Hansson - Writing Software (RailsConf 2014)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Understanding Ruby Modules Through Zombies]]></title>
    <link href="http://callahanchris.github.io/blog/2014/06/26/better-understanding-ruby-modules-through-zombies/"/>
    <updated>2014-06-26T22:02:51-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/06/26/better-understanding-ruby-modules-through-zombies</id>
    <content type="html"><![CDATA[<p>Modules in Ruby are a great place to store shared behavior and data used throughout a program. Writing a module is a convenient way to abstract out shared methods from multiple classes, thereby making the classes more DRY and manageable.</p>

<p>Some of the most popular modules in the Ruby core are <code>Comparable</code>, <code>Math</code>, and <code>Enumerable</code>. Yes, <a href="http://ruby-doc.org/core-2.1.2/Enumerable.html">a module</a> is the reason Rubyists across the world can enjoy <code>each</code> and other higher level iterators like <code>all?</code>, <code>collect</code>, and <code>inject</code>! <code>ActiveRecord</code> and <code>Sinatra</code> are two other popular modules used in the Rails and Sinatra web frameworks, respectively.</p>

<h3>Why Use Modules?</h3>

<p><a href="http://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">DHH likes modules.</a> And they&rsquo;re cool.</p>

<h3>How to Name a Module</h3>

<p>Names are important in programming. And since modules are known in technical parlance as &ldquo;namespaces&rdquo;, module names are doubly important&hellip; and doubly spacious.</p>

<p>Like classes, modules in Ruby are capitalized in CamelCase. Whereas classes tend to be singular nouns (<code>Person</code>, <code>Dog</code>, <code>Artist</code>), module names tend to be adjectives (<code>Magical</code>, <code>Persistable</code>, <code>Catlike</code>). Modules often have unique names that describe the behaviors, characteristics, or qualities shared by multiple classes.</p>

<p>These naming conventions make sense because, unlike classes, modules cannot be instantiated. You can make a new <code>Person</code>, but you cannot make a new <code>Magical</code>.</p>

<p>In your Rails app, file your modules in the <code>app/models/concerns</code>, <code>app/controllers/concerns</code>, and <code>lib/concerns</code> directories.</p>

<h3>Ineritance via Modules</h3>

<p>Direct class-to-class inheritance in Ruby is a tricky subject: only single inheritance is allowed. For example, this is valid Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Mammal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Animal</span> <span class="o">&lt;</span> <span class="no">Mammal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1">#=&gt; [Dog, Animal, Mammal, Object, Kernel, BasicObject] </span>
</span></code></pre></td></tr></table></div></figure>


<p>but this is not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MansBestFriend</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span> <span class="o">&lt;</span> <span class="no">MansBestFriend</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; TypeError: superclass mismatch for class Dog</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1">#=&gt; [Dog, Animal, Object, Kernel, BasicObject] </span>
</span></code></pre></td></tr></table></div></figure>


<p>Modules solve the problem of multiple inheritance in an interesting way. A class can call the <code>extend</code> method to inherit a module&rsquo;s class methods, and a class can call the <code>include</code> method to inherit a module&rsquo;s instance methods.</p>

<p>As a result, it is good practice to write modules in the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Generic</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="c1"># class methods go here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="c1"># instance methods go here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The methods in the <code>Generic</code> module can be mixed in to a class as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Student</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">Generic</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Generic</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Enter Zombies</h3>

<p>Zombies provide a useful analogy for thinking about the relationship between classes and modules. Consider the <code>Person</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">occupation</span>
</span><span class='line'>    <span class="s2">&quot;Being a human.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can instantiate a new person as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chris</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Chris&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Person:0x0000010185eba0 @name=&quot;Chris&quot;&gt;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Chris&quot;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">occupation</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Being a human.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s say that a zombie pandemic breaks out. First thing&rsquo;s first: how do we refactor our code?</p>

<p>We could rename our <code>Person</code> class to <code>Zombie</code> or write a new <code>Zombie</code> class, but neither of these options feel totally right. Instead, it would seem more appropriate for instances of the <code>Person</code> class to adopt zombie behavior in addition to the original behaviors of the <code>Person</code> class.</p>

<p>A <code>Zombified</code> module is the obvious choice here: it is an abstraction encapsulating shared behavior across (potentially) multiple classes, and it does not need to be instantiated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Zombified</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">status_of_the_human_race</span>
</span><span class='line'>      <span class="s2">&quot;doomed&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">InstanceMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">preferred_source_of_energy</span>
</span><span class='line'>      <span class="s2">&quot;BRAAAAIIINNNNSSSS!!!!!&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">is_alive?</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>include</code></h3>

<p>When a module is <code>include</code>d into a class, instances of that class have access to the instance methods of both the class and the module mixed in to the class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Zombified</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">chris</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Brains&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Person:0x00000102250618 @name=&quot;Brains&quot;&gt;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Brains&quot;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">preferred_source_of_energy</span>
</span><span class='line'><span class="c1">#=&gt; &quot;BRAAAAIIINNNNSSSS!!!!!&quot;</span>
</span><span class='line'><span class="n">chris</span><span class="o">.</span><span class="n">is_alive?</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>chris</code> has access to both the instance methods of the <code>Person</code> class and the instance methods provided by the <code>Zombified::InstanceMethods</code> module. In <code>chris</code>&rsquo;s method lookup chain, the methods in <code>Person</code> come before the methods in the <code>Zombified::InstanceMethods</code> module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'><span class="c1">#=&gt; [Person, Zombified::InstanceMethods, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure>


<p>An important takeaway is that method names in a module should <em>not</em> conflict with those of the method names in the classes they are mixed into. Instead, choose more abstract and granular method names.</p>

<h3><code>extend</code></h3>

<p>Uh oh. The zombie pandemic has spread across the planet. What&rsquo;s the status of the human race, then?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">status_of_the_human_race</span>
</span><span class='line'><span class="c1">#=&gt; NoMethodError: undefined method `status_of_the_human_race&#39; for Person:Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right. Time to refactor our code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">Zombified</span><span class="p">:</span><span class="ss">:ClassMethods</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">status_of_the_human_race</span>
</span><span class='line'><span class="c1">#=&gt; &quot;doomed&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Humanity is doomed, thanks to our handy module.</p>

<p>From here it&rsquo;s easy to zombify objects in other classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Zombified</span><span class="p">:</span><span class="ss">:InstanceMethods</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;Dog:0x0000010326e428&gt;</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">preferred_source_of_energy</span>
</span><span class='line'><span class="c1">#=&gt; &quot;BRAAAAIIINNNNSSSS!!!!!&quot;</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">is_alive?</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Modules are fun! I hope to do another blog post about some of the other cool and more metaprogramm-y things you can do with modules, but for now check out some of the links below.</p>

<ul>
<li><a href="http://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">DHH on Modules</a></li>
<li><a href="http://www.ruby-doc.org/core-2.1.2/Module.html">Ruby Core Documentation</a></li>
<li><a href="http://gshutler.com/2013/04/ruby-2-module-prepend/">How to <code>prepend</code> a Module</a></li>
<li><a href="http://dev.af83.com/2012/11/05/ruby-2-0-module-refine.html"><code>refine</code> Classes <code>using</code> Modules</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstraction and Music Library Sorting]]></title>
    <link href="http://callahanchris.github.io/blog/2014/06/09/abstraction-and-music-library-sorting/"/>
    <updated>2014-06-09T09:41:21-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/06/09/abstraction-and-music-library-sorting</id>
    <content type="html"><![CDATA[<p>Last week at the Flatiron School, <a href="https://twitter.com/aviflombaum">Avi Flombaum</a> talked about the merits of abstraction in code. As Avi mentioned, code can become much more idiomatic when it utilizes abstraction instead of relying on specific details.</p>

<p>The Ruby core comes equipped with a whole toolbox of nicely abstracted methods that can be used to write some great and expressive code. This one of the reasons that programmers love to write code in Ruby.</p>

<p>While doing one of the homework labs over the weekend, I realized how much more expressive code can become when many of the lower-level details are abstracted out. As I&rsquo;ve become more comfortable programming in Ruby, I&rsquo;ve been to make my code more abstract and expressive.</p>

<h3>A Non-Abstract <code>sort_songs</code></h3>

<p>In the lab, I was tasked to create a <code>sort_songs</code> method that took an array of songs expressed as strings in the format <code>"Artist - Album - Song"</code> and returned the same strings in a nested array that grouped songs based on artist and album. In order to pass this lab, the <code>sort_songs</code> method had to correctly respond to a set of RSpec tests, which sent a preset array of songs to <code>sort_songs</code> and expected the output to be a properly formatted nested array.</p>

<p>On my first crack at this problem I followed the instructions to the letter. I therefore implemented my first <code>sort_songs</code> method to respond <em>exactly</em> to the preset list of songs included in the test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sort_songs</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sorted_array</span> <span class="o">=</span>  <span class="o">[</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                      <span class="o">[]</span>
</span><span class='line'>                    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                      <span class="o">[]</span><span class="p">,</span>
</span><span class='line'>                      <span class="o">[]</span>
</span><span class='line'>                    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                    <span class="o">[</span>
</span><span class='line'>                      <span class="o">[]</span>
</span><span class='line'>                    <span class="o">]</span>
</span><span class='line'>                  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>    <span class="n">artist</span><span class="p">,</span> <span class="n">album</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; - &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">artist</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Neutral Milk Hotel&#39;</span>
</span><span class='line'>      <span class="n">sorted_array</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;The Magnetic Fields&#39;</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">album</span> <span class="o">==</span> <span class="s1">&#39;Get Lost&#39;</span>
</span><span class='line'>        <span class="n">sorted_array</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">sorted_array</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Fun&#39;</span>
</span><span class='line'>      <span class="n">sorted_array</span><span class="o">[</span><span class="mi">2</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sorted_array</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the instructions to the lab suggested, I initialized an empty array with a nested structure tailored immaculately to the list used in the test. I used the <code>each</code> method to iterate over the <code>songs</code> array, first splitting it into <code>artist</code>, <code>album</code>, and <code>title</code> variables and discarding the <code>' - '</code> through parallel variable assignment. Next I used a <code>case</code> statement that funneled the songs into different paths based on the <code>artist</code> and (in just one case!) the <code>album</code>. Then I used <code>&lt;&lt;</code> to shovel each song into its comfortable, premade bed in my well-laid-out <code>sorted_array</code>. (Seriously, they look kind of like little beds!)</p>

<p>I didn&rsquo;t feel too great about writing this <code>case</code> statement, and doubly so for the <code>if</code>/<code>else</code> statement nested in one (and only one!) of the cases. The cases are so specific! When writing this I thought to myself, &ldquo;What if I added just one more pesky song to the list? This whole program would blow up!&rdquo;</p>

<p>Finally I returned the sorted array. This also didn&rsquo;t sit so well with me, as the method implements an &ldquo;<code>each</code> sandwich,&rdquo; where the <code>each</code> iterator is the meat and the bread is the empty <code>sorted_array</code> on top and the return of <code>sorted_array</code> at the bottom. Ruby has the <code>map</code> method (and its alias <code>collect</code>) that accomplish this same feat with just one method call.</p>

<p>This code passed the tests, but I wasn&rsquo;t satisfied. And for good reason: this method is totally useless outside the confines of this one test!</p>

<p>I wanted to make something that could take <em>any</em> song in the <code>"Artist - Album - Song"</code> format and return it in a nested array. But an array is simply not the natural way to conceptualize a music collection. A nested hash, on the other hand, is just right.</p>

<h3>Making a Hash</h3>

<p>It helped me to first conceptualize this array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">songs</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - The King of Carrot Flowers&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - Get Lost - You, Me, and the Moon&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Fun - Some Nights - Some Nights&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - Get Lost - Smoke and Mirrors&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - The Book of Love&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Fun - Some Nights - We Are Young&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - Parades Go By&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Fun - Some Nights - Carry On&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - Holland 1945&quot;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>as this hash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">songs</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Neutral Milk Hotel&quot;</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;In An Aeroplane Over the Sea&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;The King of Carrot Flowers&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Holland 1945&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;The Magnetic Fields&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Get Lost&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;You, Me, and the Moon&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Smoke and Mirrors&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;69 Love Songs&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;The Book of Love&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Parades Go By&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;Fun&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Some Nights&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="s2">&quot;Some Nights&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;We Are Young&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Carry On&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a hash as the data structure in this method seemed to be a more logical choice because it&rsquo;s organized similarly to my own digital music library. At the top level, there is one large music directory (analogous to the <code>songs</code> hash) that contains all of the music on my computer. Inside the large music directory, there are a number of smaller directories (the top-level keys in the hash) named after different bands. Each band&rsquo;s directory contains that band&rsquo;s discography (the top-level values in the <code>songs</code> hash). I may have one or more albums (the keys in the nested hashes) by a given band, and each album has a tracklist (the values in the nested hashes), which can be expressed as a list of songs (or an array of strings).</p>

<p>The hash is also great because it can be very flexibly extended and it lends itself to creating a more abstract version of this program.</p>

<h3>An Abstract <code>sort_songs</code> Method</h3>

<p>Here is my improved <code>sort_songs</code> method that takes an array of songs and turns it into a hash like the one above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">sort_songs</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sorted_music_library</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>    <span class="n">artist</span><span class="p">,</span> <span class="n">album</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; - &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">album</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">][</span><span class="n">album</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">].</span><span class="n">merge!</span><span class="p">(</span><span class="n">album</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">title</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">sorted_music_library</span><span class="o">[</span><span class="n">artist</span><span class="o">][</span><span class="n">album</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">title</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hash_to_array</span><span class="p">(</span><span class="n">sorted_music_library</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method creates a <code>sorted_music_library</code> hash, then iterates over the <code>songs</code> array using the <code>each</code> method. If the artist is not a key in the hash, the hash is updated to include <code>artist</code> as a key with a value of <code>{ album =&gt; [title] }</code>. If the artist is a key in the hash but the album is not a key in the artist&rsquo;s nested hash, <code>{ album =&gt; [title] }</code> is added to the artist&rsquo;s nested hash using the destructive <code>merge!</code> method. Finally, if the artist and album are already in the <code>sorted_music_library</code> hash, the new song <code>title</code> is shoveled into the <code>album</code>&rsquo;s array of songs.</p>

<p>Finally, to make the tests pass, I called a separate <code>hash_to_array</code> method at the end of the <code>sort_songs</code> method that utilizes the <code>collect</code> method to drill down into the hash and return a nice, nested array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hash_to_array</span><span class="p">(</span><span class="n">music_library</span><span class="p">)</span>
</span><span class='line'>  <span class="n">music_library</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">artist</span><span class="p">,</span> <span class="n">discography</span><span class="o">|</span>
</span><span class='line'>    <span class="n">discography</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">album</span><span class="p">,</span> <span class="n">tracklist</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tracklist</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>        <span class="s2">&quot;</span><span class="si">#{</span><span class="n">artist</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">album</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">tracklist</span><span class="o">[</span><span class="n">tracklist</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">song</span><span class="p">)</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this code speaks for itself. That&rsquo;s the power of abstraction: it enables programmers to write more expressive code.</p>

<h3>Results</h3>

<p>When the <code>songs</code> array is sent to the abstracted <code>sort_songs</code> method, it returns the following array that makes the test pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sort_songs</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - The King of Carrot Flowers&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Neutral Milk Hotel - In An Aeroplane Over the Sea - Holland 1945&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - Get Lost - You, Me, and the Moon&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - Get Lost - Smoke and Mirrors&quot;</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - The Book of Love&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;The Magnetic Fields - 69 Love Songs - Parades Go By&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>          <span class="s2">&quot;Fun - Some Nights - Some Nights&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Fun - Some Nights - We Are Young&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Fun - Some Nights - Carry On&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Don't Know How to Program]]></title>
    <link href="http://callahanchris.github.io/blog/2014/05/23/i-dont-know-how-to-program/"/>
    <updated>2014-05-23T14:52:35-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/05/23/i-dont-know-how-to-program</id>
    <content type="html"><![CDATA[<p>I was struck by this realization recently when going through Michael Hartl&rsquo;s <a href="http://railstutorial.org"><em>Ruby on Rails Tutorial</em></a>. This was my first exposure to Rails; however, I had learned a bit of Ruby before, and as such was under the impression that I knew a thing or two about coding.</p>

<p>Overall, the tutorial was difficult and intense, but at the end I felt very accomplished for having made it all the way through. I learned a ton about Rails, test-driven development (TDD), ERb, and Ruby. Of critical importance to this was my brother, <a href="http://andrewcallahan.github.io">Andrew Callahan</a>, who was on hand to help me with my questions and problems and to offer his insights on programming.</p>

<p>I learned some important lessons while undertaking this tutorial that I hope can help me in my transition from non-programmer to programmer.</p>

<h3>1. Environment is Essential</h3>

<p>Prior to taking on the Hartl Rails Tutorial, most of the programs I had written were in Ruby alone. In order to get these programs to run, all I needed was a text editor, a terminal, and a Ruby. This setup was relatively simple to get up and running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby file.rb</span></code></pre></td></tr></table></div></figure>


<p>Rails is a bit more complex. First, I installed the Rails gem, then when building the app I had to specify which gems I needed to use to get all aspects of the app up and running. Throughout this process, a number of dependencies were introduced and I had to do a bit of wrangling with version numbers to get everything working properly. I also installed the Ruby Version Manager (RVM) and got more familiar with using git, GitHub, and Heroku.</p>

<p>I got burned by not paying close attention to my environment when going through the Hartl tutorial. I started off using the Rails 4.0 version of the tutorial, and I used Rails 4.1 &ndash; the latest version at the time &ndash; when making my first example app. I then went back and saw that the Flatiron School <a href="http://prework.flatironschool.com">prework site</a> recommended going through the Rails 3.2 edition of the tutorial. I went back, installed Rails 3.2 and Ruby 1.9.3, and then made it through the first couple chapters of the tutorial without much issue.</p>

<p>The next day I was surprised to find that railstutorial.org had undergone a redesign, and the Rails 3.2 version of the book had gone behind a paywall. The Rails 4.0 version was still available for free &ndash; and what an incredible free resource it is! &ndash; so I tried to push forward by applying the instructions in the Rails 4.0 version to my Rails 3.2 app. This was a mistake. Eventually, I cut my losses and restarted the tutorial using Rails 4.0.</p>

<p>(As a side note, after writing the first draft of this blog post I made the same mistake as described above, but in reverse, on a <a href="http://teamtreehouse.com">Treehouse</a> Rails tutorial. I ended up having to restart the tutorial using a different version of Rails. I really need to pay better attention to accurately setting up my dev environment!)</p>

<p>Whereas before I considered programming to simply be the act of writing code, after making a sample app in Rails I realized that getting the proper environment set up can often be half the battle. Understanding the tools that make up the technology stack is incredibly important and is something I want to learn more about going forward.</p>

<h3>2. Read the Error Messages</h3>

<p>Another misconception I had was that code should generally work, and when it doesn&rsquo;t it should be debugged. This notion was turned completely on its head thanks to TDD, where code first fails and subsequently is made to work.</p>

<p>Even though I was following the code of the tutorial closely, some unexpected errors (in addition to the expected ones) inevitably popped up. Until Andrew pointed this out to me, I didn&rsquo;t realize that I had unconsciously just been glazing over the error messages showing up in the terminal. Prior to this, my &ldquo;process&rdquo; was essentially:</p>

<ul>
<li>See an error message surface.</li>
<li>Ignore its contents.</li>
<li>Immediately return to the text editor.</li>
<li>Guess what caused the error.</li>
<li>Try to fix what I guessed to be the problematic code.</li>
</ul>


<p>The error messages are there to help you; read them. This lesson seems really basic, but it is a great thing that I learned.</p>

<h3>3. Power Through</h3>

<p>Making a functioning Twitter-like app in Rails was hard. But that&rsquo;s OK &ndash; I have only done it one time, and had never done anything like it before going through Hartl&rsquo;s tutorial. I expected to be able to &ldquo;just get things&rdquo; before going in (remember, I &ldquo;knew&rdquo; about coding), and found that it was nowhere near that simple. After completing the tutorial, I realize that there are more areas that I don&rsquo;t understand than those I do. That&rsquo;s also OK &ndash; I am going to be learning all about Rails when I start at the <a href="http://flatironschool.com">Flatiron School</a> next month.</p>

<p>I tend to be meticulous and work slowly if I am trying to fully grasp the subject matter at hand. I could have easily spent twice as much time on the Rails tutorial than I did, but it&rsquo;s probably a good thing that I didn&rsquo;t. Instead of dwelling on everything I didn&rsquo;t understand, I powered through and practiced &ldquo;getting used to&rdquo; the things I didn&rsquo;t understand. Rather than obsessively going down each rabbit hole, I tried to keep an eye on the big picture and take things in stride.</p>

<h3>Conclusion</h3>

<p>I am excited to have begun learning how to program Rails applications and to be making progress on my path to becoming a professional web developer. Though I feel accomplished about completing the Hartl <em>Rails Tutorial</em>, working my way through it really made me realize how little I know and how much learning I have ahead of me. I am glad to have had a taste of the Rails development process and gleaned the lessons above.</p>

<p>I&rsquo;ll say it again: I don&rsquo;t know how to program. It&rsquo;s the truth. Now that I&rsquo;ve put that out there, the only way to go is up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog = Blog.new]]></title>
    <link href="http://callahanchris.github.io/blog/2014/05/20/blog-equals-blog-dot-new/"/>
    <updated>2014-05-20T15:29:04-04:00</updated>
    <id>http://callahanchris.github.io/blog/2014/05/20/blog-equals-blog-dot-new</id>
    <content type="html"><![CDATA[<p>This is the first post on my new blog. My name is Chris, and this blog will be about my journey from zero to hacker. As the first major step on the way to accomplishing this goal, I will be enrolling in the web development track at the Flatiron School in New York starting on June 2, 2014.</p>

<p>Over the course of the past year, I have started learning how to program &ndash; mainly Ruby, but also bits of C, HTML, CSS, JavaScript, and most recently Ruby on Rails. I am now working through the Flatiron School&rsquo;s excellent <a href="http://prework.flatironschool.com/web-development/">prework curriculum</a> in preparation for the course.</p>

<p>I&rsquo;m looking forward to writing down my thoughts and experiences along the way to becoming a professional web dev in this blog. I know that learning how to program will be difficult, so I am also looking forward to sharing some of my problems and difficulties along the way.</p>
]]></content>
  </entry>
  
</feed>
